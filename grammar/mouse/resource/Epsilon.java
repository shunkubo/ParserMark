package resource;
//=========================================================================
//
//  This file was generated by Mouse 1.6.1 at 2017-01-19 07:32:32 GMT
//  from grammar
//    '/home/tsunade/ParserMark/grammar/mouse/resource/Epsilon.peg'.
//
//=========================================================================

import mouse.runtime.Source;

public class Epsilon extends mouse.runtime.ParserBase
{
  final mouse.runtime.SemanticsBase sem;
  
  //=======================================================================
  //
  //  Initialization
  //
  //=======================================================================
  //-------------------------------------------------------------------
  //  Constructor
  //-------------------------------------------------------------------
  public Epsilon()
    {
      sem = new mouse.runtime.SemanticsBase();
      sem.rule = this;
      super.sem = sem;
    }
  
  //-------------------------------------------------------------------
  //  Run the parser
  //-------------------------------------------------------------------
  public boolean parse(Source src)
    {
      super.init(src);
      sem.init();
      if (File()) return true;
      return failure();
    }
  
  //-------------------------------------------------------------------
  //  Get semantics
  //-------------------------------------------------------------------
  public mouse.runtime.SemanticsBase semantics()
    { return sem; }
  
  //=======================================================================
  //
  //  Parsing procedures
  //
  //=======================================================================
  //=====================================================================
  //  File = UB TopLevel UB EOT ;
  //=====================================================================
  private boolean File()
    {
      begin("File");
      UB();
      if (!TopLevel()) return reject();
      UB();
      if (!EOT()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  UB = (S / BLOCKCOMMENT / LINECOMMENT)* ;
  //=====================================================================
  private boolean UB()
    {
      begin("UB");
      while (UB_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  UB_0 = S / BLOCKCOMMENT / LINECOMMENT
  //-------------------------------------------------------------------
  private boolean UB_0()
    {
      begin("");
      if (S()) return acceptInner();
      if (BLOCKCOMMENT()) return acceptInner();
      if (LINECOMMENT()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  S = [\t-\n] / "\r" / " " ;
  //=====================================================================
  private boolean S()
    {
      begin("S");
      if (nextIn('\t','\n')) return accept();
      if (next('\r')) return accept();
      if (next(' ')) return accept();
      return reject();
    }
  
  //=====================================================================
  //  BLOCKCOMMENT = "/" "*" (!("*" "/") _)* "*" "/" ;
  //=====================================================================
  private boolean BLOCKCOMMENT()
    {
      begin("BLOCKCOMMENT");
      if (!next('/')) return reject();
      if (!next('*')) return reject();
      while (BLOCKCOMMENT_0());
      if (!next('*')) return reject();
      if (!next('/')) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  BLOCKCOMMENT_0 = !("*" "/") _
  //-------------------------------------------------------------------
  private boolean BLOCKCOMMENT_0()
    {
      begin("");
      if (!BLOCKCOMMENT_1()) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  BLOCKCOMMENT_1 = !("*" "/")
  //-------------------------------------------------------------------
  private boolean BLOCKCOMMENT_1()
    {
      begin("","not \"*\" \"/\"");
      if (BLOCKCOMMENT_2()) return rejectNot();
      return acceptNot();
    }
  
  //-------------------------------------------------------------------
  //  BLOCKCOMMENT_2 = "*" "/"
  //-------------------------------------------------------------------
  private boolean BLOCKCOMMENT_2()
    {
      begin("");
      if (!next('*')) return rejectInner();
      if (!next('/')) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  LINECOMMENT = "/" "/" (!"\n" _)* ;
  //=====================================================================
  private boolean LINECOMMENT()
    {
      begin("LINECOMMENT");
      if (!next('/')) return reject();
      if (!next('/')) return reject();
      while (LINECOMMENT_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  LINECOMMENT_0 = !"\n" _
  //-------------------------------------------------------------------
  private boolean LINECOMMENT_0()
    {
      begin("");
      if (!aheadNot('\n')) return rejectInner();
      if (!next()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  EOT = !_ ;
  //=====================================================================
  private boolean EOT()
    {
      begin("EOT");
      if (!aheadNot()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Identifier = NAME UB ;
  //=====================================================================
  private boolean Identifier()
    {
      begin("Identifier");
      if (!NAME()) return reject();
      UB();
      return accept();
    }
  
  //=====================================================================
  //  NAME = !DIGIT !KEYWORD W+ ;
  //=====================================================================
  private boolean NAME()
    {
      begin("NAME");
      if (!NAME_0()) return reject();
      if (!NAME_1()) return reject();
      if (!W()) return reject();
      while (W());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  NAME_0 = !DIGIT
  //-------------------------------------------------------------------
  private boolean NAME_0()
    {
      begin("","not DIGIT");
      if (DIGIT()) return rejectNot();
      return acceptNot();
    }
  
  //-------------------------------------------------------------------
  //  NAME_1 = !KEYWORD
  //-------------------------------------------------------------------
  private boolean NAME_1()
    {
      begin("","not KEYWORD");
      if (KEYWORD()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  DIGIT = [0-9] ;
  //=====================================================================
  private boolean DIGIT()
    {
      begin("DIGIT");
      if (!nextIn('0','9')) return reject();
      return accept();
    }
  
  //=====================================================================
  //  W = "$" / [0-9] / [A-Z] / "_" / [a-z] ;
  //=====================================================================
  private boolean W()
    {
      begin("W");
      if (next('$')) return accept();
      if (nextIn('0','9')) return accept();
      if (nextIn('A','Z')) return accept();
      if (next('_')) return accept();
      if (nextIn('a','z')) return accept();
      return reject();
    }
  
  //=====================================================================
  //  TopLevel = (Statement / Declaration)+ ;
  //=====================================================================
  private boolean TopLevel()
    {
      begin("TopLevel");
      if (!TopLevel_0()) return reject();
      while (TopLevel_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  TopLevel_0 = Statement / Declaration
  //-------------------------------------------------------------------
  private boolean TopLevel_0()
    {
      begin("");
      if (Statement()) return acceptInner();
      if (Declaration()) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  KEYWORD = ("e" "l" "s" "e" / "i" "f" / "r" "e" "t" "u" "r" "n" /
  //    "f" "u" "n" "c" "t" "i" "o" "n" / "v" "a" "r") !W ;
  //=====================================================================
  private boolean KEYWORD()
    {
      begin("KEYWORD");
      if (!KEYWORD_0()
       && !KEYWORD_1()
       && !KEYWORD_2()
       && !KEYWORD_3()
       && !KEYWORD_4()
         ) return reject();
      if (!KEYWORD_5()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  KEYWORD_0 = "e" "l" "s" "e"
  //-------------------------------------------------------------------
  private boolean KEYWORD_0()
    {
      begin("");
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  KEYWORD_1 = "i" "f"
  //-------------------------------------------------------------------
  private boolean KEYWORD_1()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  KEYWORD_2 = "r" "e" "t" "u" "r" "n"
  //-------------------------------------------------------------------
  private boolean KEYWORD_2()
    {
      begin("");
      if (!next('r')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('t')) return rejectInner();
      if (!next('u')) return rejectInner();
      if (!next('r')) return rejectInner();
      if (!next('n')) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  KEYWORD_3 = "f" "u" "n" "c" "t" "i" "o" "n"
  //-------------------------------------------------------------------
  private boolean KEYWORD_3()
    {
      begin("");
      if (!next('f')) return rejectInner();
      if (!next('u')) return rejectInner();
      if (!next('n')) return rejectInner();
      if (!next('c')) return rejectInner();
      if (!next('t')) return rejectInner();
      if (!next('i')) return rejectInner();
      if (!next('o')) return rejectInner();
      if (!next('n')) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  KEYWORD_4 = "v" "a" "r"
  //-------------------------------------------------------------------
  private boolean KEYWORD_4()
    {
      begin("");
      if (!next('v')) return rejectInner();
      if (!next('a')) return rejectInner();
      if (!next('r')) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  KEYWORD_5 = !W
  //-------------------------------------------------------------------
  private boolean KEYWORD_5()
    {
      begin("","not W");
      if (W()) return rejectNot();
      return acceptNot();
    }
  
  //=====================================================================
  //  Declaration = (FunctionDeclaration / VariableDeclaration) ;
  //=====================================================================
  private boolean Declaration()
    {
      begin("Declaration");
      if (!FunctionDeclaration()
       && !VariableDeclaration()
         ) return reject();
      return accept();
    }
  
  //=====================================================================
  //  FunctionDeclaration = "f" "u" "n" "c" "t" "i" "o" "n" !W UB
  //    Identifier UB "(" UB FunctionParamList ")" UB Block ;
  //=====================================================================
  private boolean FunctionDeclaration()
    {
      begin("FunctionDeclaration");
      if (!next('f')) return reject();
      if (!next('u')) return reject();
      if (!next('n')) return reject();
      if (!next('c')) return reject();
      if (!next('t')) return reject();
      if (!next('i')) return reject();
      if (!next('o')) return reject();
      if (!next('n')) return reject();
      if (!KEYWORD_5()) return reject();
      UB();
      if (!Identifier()) return reject();
      UB();
      if (!next('(')) return reject();
      UB();
      FunctionParamList();
      if (!next(')')) return reject();
      UB();
      if (!Block()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  FunctionParamList = (FunctionParam ("," UB FunctionParam)*)? ;
  //=====================================================================
  private boolean FunctionParamList()
    {
      begin("FunctionParamList");
      FunctionParamList_0();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  FunctionParamList_0 = FunctionParam ("," UB FunctionParam)*
  //-------------------------------------------------------------------
  private boolean FunctionParamList_0()
    {
      begin("");
      if (!FunctionParam()) return rejectInner();
      while (FunctionParamList_1());
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  FunctionParamList_1 = "," UB FunctionParam
  //-------------------------------------------------------------------
  private boolean FunctionParamList_1()
    {
      begin("");
      if (!next(',')) return rejectInner();
      UB();
      if (!FunctionParam()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  FunctionParam = Identifier UB ;
  //=====================================================================
  private boolean FunctionParam()
    {
      begin("FunctionParam");
      if (!Identifier()) return reject();
      UB();
      return accept();
    }
  
  //=====================================================================
  //  VariableDeclaration = "v" "a" "r" !W UB VariableList ";" UB ;
  //=====================================================================
  private boolean VariableDeclaration()
    {
      begin("VariableDeclaration");
      if (!next('v')) return reject();
      if (!next('a')) return reject();
      if (!next('r')) return reject();
      if (!KEYWORD_5()) return reject();
      UB();
      if (!VariableList()) return reject();
      if (!next(';')) return reject();
      UB();
      return accept();
    }
  
  //=====================================================================
  //  VariableList = InitDecl ("," UB InitDecl)* ;
  //=====================================================================
  private boolean VariableList()
    {
      begin("VariableList");
      if (!InitDecl()) return reject();
      while (VariableList_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  VariableList_0 = "," UB InitDecl
  //-------------------------------------------------------------------
  private boolean VariableList_0()
    {
      begin("");
      if (!next(',')) return rejectInner();
      UB();
      if (!InitDecl()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  InitDecl = Identifier ("=" !"=" UB Initializer)? UB ;
  //=====================================================================
  private boolean InitDecl()
    {
      begin("InitDecl");
      if (!Identifier()) return reject();
      InitDecl_0();
      UB();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  InitDecl_0 = "=" !"=" UB Initializer
  //-------------------------------------------------------------------
  private boolean InitDecl_0()
    {
      begin("");
      if (!next('=')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      if (!Initializer()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  Initializer = AssignmentExpression ;
  //=====================================================================
  private boolean Initializer()
    {
      begin("Initializer");
      if (!AssignmentExpression()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  Block = "{" UB (Statement UB / Declaration UB)* "}" UB ;
  //=====================================================================
  private boolean Block()
    {
      begin("Block");
      if (!next('{')) return reject();
      UB();
      while (Block_0());
      if (!next('}')) return reject();
      UB();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Block_0 = Statement UB / Declaration UB
  //-------------------------------------------------------------------
  private boolean Block_0()
    {
      begin("");
      if (Block_1()) return acceptInner();
      if (Block_2()) return acceptInner();
      return rejectInner();
    }
  
  //-------------------------------------------------------------------
  //  Block_1 = Statement UB
  //-------------------------------------------------------------------
  private boolean Block_1()
    {
      begin("");
      if (!Statement()) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Block_2 = Declaration UB
  //-------------------------------------------------------------------
  private boolean Block_2()
    {
      begin("");
      if (!Declaration()) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  Statement = (Block / "i" "f" !W UB "(" UB Expression ")" UB Block
  //    "e" "l" "s" "e" "1" UB Block / "i" "f" !W UB "(" UB Expression
  //    ")" UB Block "e" "l" "s" "e" "2" UB Block / "i" "f" !W UB "(" UB
  //    Expression ")" UB Block "e" "l" "s" "e" "3" UB Block / "i" "f" !W
  //    UB "(" UB Expression ")" UB Block "e" "l" "s" "e" "4" UB Block /
  //    "i" "f" !W UB "(" UB Expression ")" UB Block "e" "l" "s" "e" "5"
  //    UB Block / "i" "f" !W UB "(" UB Expression ")" UB Block "e" "l"
  //    "s" "e" "6" UB Block / "i" "f" !W UB "(" UB Expression ")" UB
  //    Block "e" "l" "s" "e" "7" UB Block / "i" "f" !W UB "(" UB
  //    Expression ")" UB Block "e" "l" "s" "e" "8" UB Block / "i" "f" !W
  //    UB "(" UB Expression ")" UB Block "e" "l" "s" "e" "9" UB Block /
  //    "i" "f" !W UB "(" UB Expression ")" UB Block "e" "l" "s" "e" "A"
  //    UB Block / "i" "f" !W UB "(" UB Expression ")" UB Block "e" "l"
  //    "s" "e" "B" UB Block / "i" "f" !W UB "(" UB Expression ")" UB
  //    Block "e" "l" "s" "e" "C" UB Block / "i" "f" !W UB "(" UB
  //    Expression ")" UB Block ("e" "l" "s" "e" !W UB Block)? / "r" "e"
  //    "t" "u" "r" "n" !W UB Expression? ";" UB / Expression ";" UB) ;
  //=====================================================================
  private boolean Statement()
    {
      begin("Statement");
      if (!Block()
       && !Statement_0()
       && !Statement_1()
       && !Statement_2()
       && !Statement_3()
       && !Statement_4()
       && !Statement_5()
       && !Statement_6()
       && !Statement_7()
       && !Statement_8()
       && !Statement_9()
       && !Statement_10()
       && !Statement_11()
       && !Statement_12()
       && !Statement_13()
       && !Statement_14()
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Statement_0 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "1" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_0()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('1')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_1 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "2" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_1()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('2')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_2 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "3" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_2()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('3')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_3 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "4" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_3()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('4')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_4 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "5" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_4()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('5')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_5 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "6" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_5()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('6')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_6 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "7" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_6()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('7')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_7 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "8" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_7()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('8')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_8 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "9" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_8()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('9')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_9 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "A" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_9()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('A')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_10 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "B" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_10()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('B')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_11 = "i" "f" !W UB "(" UB Expression ")" UB Block "e"
  //    "l" "s" "e" "C" UB Block
  //-------------------------------------------------------------------
  private boolean Statement_11()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('C')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_12 = "i" "f" !W UB "(" UB Expression ")" UB Block ("e"
  //    "l" "s" "e" !W UB Block)?
  //-------------------------------------------------------------------
  private boolean Statement_12()
    {
      begin("");
      if (!next('i')) return rejectInner();
      if (!next('f')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      Statement_15();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_13 = "r" "e" "t" "u" "r" "n" !W UB Expression? ";" UB
  //-------------------------------------------------------------------
  private boolean Statement_13()
    {
      begin("");
      if (!next('r')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!next('t')) return rejectInner();
      if (!next('u')) return rejectInner();
      if (!next('r')) return rejectInner();
      if (!next('n')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      Expression();
      if (!next(';')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_14 = Expression ";" UB
  //-------------------------------------------------------------------
  private boolean Statement_14()
    {
      begin("");
      if (!Expression()) return rejectInner();
      if (!next(';')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  Statement_15 = "e" "l" "s" "e" !W UB Block
  //-------------------------------------------------------------------
  private boolean Statement_15()
    {
      begin("");
      if (!next('e')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      if (!Block()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  Expression = AssignmentExpression ("," UB AssignmentExpression)* ;
  //=====================================================================
  private boolean Expression()
    {
      begin("Expression");
      if (!AssignmentExpression()) return reject();
      while (Expression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  Expression_0 = "," UB AssignmentExpression
  //-------------------------------------------------------------------
  private boolean Expression_0()
    {
      begin("");
      if (!next(',')) return rejectInner();
      UB();
      if (!AssignmentExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  AssignmentExpression = (UnaryExpression UBAssignmentOperator
  //    AssignmentExpression / ConditionalExpression) ;
  //=====================================================================
  private boolean AssignmentExpression()
    {
      begin("AssignmentExpression");
      if (!AssignmentExpression_0()
       && !ConditionalExpression()
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  AssignmentExpression_0 = UnaryExpression UBAssignmentOperator
  //    AssignmentExpression
  //-------------------------------------------------------------------
  private boolean AssignmentExpression_0()
    {
      begin("");
      if (!UnaryExpression()) return rejectInner();
      if (!UBAssignmentOperator()) return rejectInner();
      if (!AssignmentExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  UBAssignmentOperator = ("=" !"=" UB / "*" "=" UB / "/" "=" UB / "%"
  //    "=" UB / "+" "=" UB / "-" "=" UB / "<" "<" "=" UB / ">" ">" "="
  //    UB / ">" ">" ">" "=" UB / "&" "=" UB / "^" "=" UB / "|" "=" UB)
  //    ;
  //=====================================================================
  private boolean UBAssignmentOperator()
    {
      begin("UBAssignmentOperator");
      if (!UBAssignmentOperator_0()
       && !UBAssignmentOperator_1()
       && !UBAssignmentOperator_2()
       && !UBAssignmentOperator_3()
       && !UBAssignmentOperator_4()
       && !UBAssignmentOperator_5()
       && !UBAssignmentOperator_6()
       && !UBAssignmentOperator_7()
       && !UBAssignmentOperator_8()
       && !UBAssignmentOperator_9()
       && !UBAssignmentOperator_10()
       && !UBAssignmentOperator_11()
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_0 = "=" !"=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_0()
    {
      begin("");
      if (!next('=')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_1 = "*" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_1()
    {
      begin("");
      if (!next('*')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_2 = "/" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_2()
    {
      begin("");
      if (!next('/')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_3 = "%" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_3()
    {
      begin("");
      if (!next('%')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_4 = "+" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_4()
    {
      begin("");
      if (!next('+')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_5 = "-" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_5()
    {
      begin("");
      if (!next('-')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_6 = "<" "<" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_6()
    {
      begin("");
      if (!next('<')) return rejectInner();
      if (!next('<')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_7 = ">" ">" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_7()
    {
      begin("");
      if (!next('>')) return rejectInner();
      if (!next('>')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_8 = ">" ">" ">" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_8()
    {
      begin("");
      if (!next('>')) return rejectInner();
      if (!next('>')) return rejectInner();
      if (!next('>')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_9 = "&" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_9()
    {
      begin("");
      if (!next('&')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_10 = "^" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_10()
    {
      begin("");
      if (!next('^')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  UBAssignmentOperator_11 = "|" "=" UB
  //-------------------------------------------------------------------
  private boolean UBAssignmentOperator_11()
    {
      begin("");
      if (!next('|')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  ConstantExpression = ConditionalExpression ;
  //=====================================================================
  private boolean ConstantExpression()
    {
      begin("ConstantExpression");
      if (!ConditionalExpression()) return reject();
      return accept();
    }
  
  //=====================================================================
  //  ConditionalExpression = LogicalOrExpression ("?" UB Expression ":"
  //    !">" UB LogicalOrExpression)* ;
  //=====================================================================
  private boolean ConditionalExpression()
    {
      begin("ConditionalExpression");
      if (!LogicalOrExpression()) return reject();
      while (ConditionalExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  ConditionalExpression_0 = "?" UB Expression ":" !">" UB
  //    LogicalOrExpression
  //-------------------------------------------------------------------
  private boolean ConditionalExpression_0()
    {
      begin("");
      if (!next('?')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(':')) return rejectInner();
      if (!aheadNot('>')) return rejectInner();
      UB();
      if (!LogicalOrExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  LogicalOrExpression = LogicalAndExpression ("|" "|" UB
  //    LogicalAndExpression)* ;
  //=====================================================================
  private boolean LogicalOrExpression()
    {
      begin("LogicalOrExpression");
      if (!LogicalAndExpression()) return reject();
      while (LogicalOrExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  LogicalOrExpression_0 = "|" "|" UB LogicalAndExpression
  //-------------------------------------------------------------------
  private boolean LogicalOrExpression_0()
    {
      begin("");
      if (!next('|')) return rejectInner();
      if (!next('|')) return rejectInner();
      UB();
      if (!LogicalAndExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  LogicalAndExpression = EqualityExpression ("&" "&" UB
  //    EqualityExpression)* ;
  //=====================================================================
  private boolean LogicalAndExpression()
    {
      begin("LogicalAndExpression");
      if (!EqualityExpression()) return reject();
      while (LogicalAndExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  LogicalAndExpression_0 = "&" "&" UB EqualityExpression
  //-------------------------------------------------------------------
  private boolean LogicalAndExpression_0()
    {
      begin("");
      if (!next('&')) return rejectInner();
      if (!next('&')) return rejectInner();
      UB();
      if (!EqualityExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  EqualityExpression = RelationalExpression (("=" "=" UB / "!" "="
  //    UB) RelationalExpression)* ;
  //=====================================================================
  private boolean EqualityExpression()
    {
      begin("EqualityExpression");
      if (!RelationalExpression()) return reject();
      while (EqualityExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  EqualityExpression_0 = ("=" "=" UB / "!" "=" UB)
  //    RelationalExpression
  //-------------------------------------------------------------------
  private boolean EqualityExpression_0()
    {
      begin("");
      if (!EqualityExpression_1()
       && !EqualityExpression_2()
         ) return rejectInner();
      if (!RelationalExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  EqualityExpression_1 = "=" "=" UB
  //-------------------------------------------------------------------
  private boolean EqualityExpression_1()
    {
      begin("");
      if (!next('=')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  EqualityExpression_2 = "!" "=" UB
  //-------------------------------------------------------------------
  private boolean EqualityExpression_2()
    {
      begin("");
      if (!next('!')) return rejectInner();
      if (!next('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  RelationalExpression = UnaryExpression (("<" !"=" UB / "<" "=" !"="
  //    UB / ">" !"=" UB / ">" "=" !"=" UB) UnaryExpression)* ;
  //=====================================================================
  private boolean RelationalExpression()
    {
      begin("RelationalExpression");
      if (!UnaryExpression()) return reject();
      while (RelationalExpression_0());
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_0 = ("<" !"=" UB / "<" "=" !"=" UB / ">"
  //    !"=" UB / ">" "=" !"=" UB) UnaryExpression
  //-------------------------------------------------------------------
  private boolean RelationalExpression_0()
    {
      begin("");
      if (!RelationalExpression_1()
       && !RelationalExpression_2()
       && !RelationalExpression_3()
       && !RelationalExpression_4()
         ) return rejectInner();
      if (!UnaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_1 = "<" !"=" UB
  //-------------------------------------------------------------------
  private boolean RelationalExpression_1()
    {
      begin("");
      if (!next('<')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_2 = "<" "=" !"=" UB
  //-------------------------------------------------------------------
  private boolean RelationalExpression_2()
    {
      begin("");
      if (!next('<')) return rejectInner();
      if (!next('=')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_3 = ">" !"=" UB
  //-------------------------------------------------------------------
  private boolean RelationalExpression_3()
    {
      begin("");
      if (!next('>')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  RelationalExpression_4 = ">" "=" !"=" UB
  //-------------------------------------------------------------------
  private boolean RelationalExpression_4()
    {
      begin("");
      if (!next('>')) return rejectInner();
      if (!next('=')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  UnaryExpression = (PostfixExpression / "!" !"=" UB UnaryExpression)
  //    ;
  //=====================================================================
  private boolean UnaryExpression()
    {
      begin("UnaryExpression");
      if (!PostfixExpression()
       && !UnaryExpression_0()
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  UnaryExpression_0 = "!" !"=" UB UnaryExpression
  //-------------------------------------------------------------------
  private boolean UnaryExpression_0()
    {
      begin("");
      if (!next('!')) return rejectInner();
      if (!aheadNot('=')) return rejectInner();
      UB();
      if (!UnaryExpression()) return rejectInner();
      return acceptInner();
    }
  
  //=====================================================================
  //  PostfixExpression = (FunctionCall / PrimaryExpression) ;
  //=====================================================================
  private boolean PostfixExpression()
    {
      begin("PostfixExpression");
      if (!FunctionCall()
       && !PrimaryExpression()
         ) return reject();
      return accept();
    }
  
  //=====================================================================
  //  FunctionCall = PrimaryExpression UBFunctionCall+ ;
  //=====================================================================
  private boolean FunctionCall()
    {
      begin("FunctionCall");
      if (!PrimaryExpression()) return reject();
      if (!UBFunctionCall()) return reject();
      while (UBFunctionCall());
      return accept();
    }
  
  //=====================================================================
  //  UBFunctionCall = "(" UB UBArgumentExpressionList? ")" UB ;
  //=====================================================================
  private boolean UBFunctionCall()
    {
      begin("UBFunctionCall");
      if (!next('(')) return reject();
      UB();
      UBArgumentExpressionList();
      if (!next(')')) return reject();
      UB();
      return accept();
    }
  
  //=====================================================================
  //  UBArgumentExpressionList = AssignmentExpression ("," UB
  //    AssignmentExpression)* ;
  //=====================================================================
  private boolean UBArgumentExpressionList()
    {
      begin("UBArgumentExpressionList");
      if (!AssignmentExpression()) return reject();
      while (Expression_0());
      return accept();
    }
  
  //=====================================================================
  //  PrimaryExpression = (Constant / "(" UB Expression ")" UB /
  //    FunctionExpression / Identifier) ;
  //=====================================================================
  private boolean PrimaryExpression()
    {
      begin("PrimaryExpression");
      if (!Constant()
       && !PrimaryExpression_0()
       && !FunctionExpression()
       && !Identifier()
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  PrimaryExpression_0 = "(" UB Expression ")" UB
  //-------------------------------------------------------------------
  private boolean PrimaryExpression_0()
    {
      begin("");
      if (!next('(')) return rejectInner();
      UB();
      if (!Expression()) return rejectInner();
      if (!next(')')) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  FunctionExpression = "f" "u" "n" "c" "t" "i" "o" "n" !W UB
  //    (Identifier UB)? "(" UB FunctionParamList ")" UB Block ":" ":" UB
  //    ;
  //=====================================================================
  private boolean FunctionExpression()
    {
      begin("FunctionExpression");
      if (!next('f')) return reject();
      if (!next('u')) return reject();
      if (!next('n')) return reject();
      if (!next('c')) return reject();
      if (!next('t')) return reject();
      if (!next('i')) return reject();
      if (!next('o')) return reject();
      if (!next('n')) return reject();
      if (!KEYWORD_5()) return reject();
      UB();
      FunctionExpression_0();
      if (!next('(')) return reject();
      UB();
      FunctionParamList();
      if (!next(')')) return reject();
      UB();
      if (!Block()) return reject();
      if (!next(':')) return reject();
      if (!next(':')) return reject();
      UB();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  FunctionExpression_0 = Identifier UB
  //-------------------------------------------------------------------
  private boolean FunctionExpression_0()
    {
      begin("");
      if (!Identifier()) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  Constant = (IntegerLiteral / BooleanLiteral / StringLiteral /
  //    NullLiteral) ;
  //=====================================================================
  private boolean Constant()
    {
      begin("Constant");
      if (!IntegerLiteral()
       && !BooleanLiteral()
       && !StringLiteral()
       && !NullLiteral()
         ) return reject();
      return accept();
    }
  
  //=====================================================================
  //  IntegerLiteral = DECIMAL UB ;
  //=====================================================================
  private boolean IntegerLiteral()
    {
      begin("IntegerLiteral");
      if (!DECIMAL()) return reject();
      UB();
      return accept();
    }
  
  //=====================================================================
  //  DECIMAL = ([1-9] DIGIT* / "0") ;
  //=====================================================================
  private boolean DECIMAL()
    {
      begin("DECIMAL");
      if (!DECIMAL_0()
       && !next('0')
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  DECIMAL_0 = [1-9] DIGIT*
  //-------------------------------------------------------------------
  private boolean DECIMAL_0()
    {
      begin("");
      if (!nextIn('1','9')) return rejectInner();
      while (DIGIT());
      return acceptInner();
    }
  
  //=====================================================================
  //  BooleanLiteral = ("t" "r" "u" "e" !W UB / "f" "a" "l" "s" "e" !W
  //    UB) ;
  //=====================================================================
  private boolean BooleanLiteral()
    {
      begin("BooleanLiteral");
      if (!BooleanLiteral_0()
       && !BooleanLiteral_1()
         ) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  BooleanLiteral_0 = "t" "r" "u" "e" !W UB
  //-------------------------------------------------------------------
  private boolean BooleanLiteral_0()
    {
      begin("");
      if (!next('t')) return rejectInner();
      if (!next('r')) return rejectInner();
      if (!next('u')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //-------------------------------------------------------------------
  //  BooleanLiteral_1 = "f" "a" "l" "s" "e" !W UB
  //-------------------------------------------------------------------
  private boolean BooleanLiteral_1()
    {
      begin("");
      if (!next('f')) return rejectInner();
      if (!next('a')) return rejectInner();
      if (!next('l')) return rejectInner();
      if (!next('s')) return rejectInner();
      if (!next('e')) return rejectInner();
      if (!KEYWORD_5()) return rejectInner();
      UB();
      return acceptInner();
    }
  
  //=====================================================================
  //  StringLiteral = """ STRINGUBCONTENT* """ UB ;
  //=====================================================================
  private boolean StringLiteral()
    {
      begin("StringLiteral");
      if (!next('"')) return reject();
      while (STRINGUBCONTENT());
      if (!next('"')) return reject();
      UB();
      return accept();
    }
  
  //=====================================================================
  //  STRINGUBCONTENT = !("\n" / """ / "\") _ ;
  //=====================================================================
  private boolean STRINGUBCONTENT()
    {
      begin("STRINGUBCONTENT");
      if (!STRINGUBCONTENT_0()) return reject();
      if (!next()) return reject();
      return accept();
    }
  
  //-------------------------------------------------------------------
  //  STRINGUBCONTENT_0 = !("\n" / """ / "\")
  //-------------------------------------------------------------------
  private boolean STRINGUBCONTENT_0()
    {
      begin("","not \"\n\" / \"\"\" / \"\\\"");
      if (STRINGUBCONTENT_1()) return rejectNot();
      return acceptNot();
    }
  
  //-------------------------------------------------------------------
  //  STRINGUBCONTENT_1 = "\n" / """ / "\"
  //-------------------------------------------------------------------
  private boolean STRINGUBCONTENT_1()
    {
      begin("");
      if (next('\n')) return acceptInner();
      if (next('"')) return acceptInner();
      if (next('\\')) return acceptInner();
      return rejectInner();
    }
  
  //=====================================================================
  //  NullLiteral = "n" "u" "l" "l" !W UB ;
  //=====================================================================
  private boolean NullLiteral()
    {
      begin("NullLiteral");
      if (!next('n')) return reject();
      if (!next('u')) return reject();
      if (!next('l')) return reject();
      if (!next('l')) return reject();
      if (!KEYWORD_5()) return reject();
      UB();
      return accept();
    }
  
}
