File = UB TopLevel UB EOT ;
UB = ((S  / BLOCKCOMMENT  / LINECOMMENT ) )* ;
S = [\t-\n] / "\r" / " " ;
BLOCKCOMMENT = "/""*"(!("*""/") _)* "*""/";
LINECOMMENT = "/""/"(!("\n") _)* ;
EOT = !(_) ;
Identifier = NAME UB ;
NAME = !(DIGIT ) !(KEYWORD ) (W )+ ;
DIGIT = [0-9] ;
W = "$" / [0-9] / [A-Z] / "_" / [a-z] ;
TopLevel = ((Statement  / Declaration ) )+ ;
KEYWORD = ("e""l""s""e" / "i""f" / "r""e""t""u""r""n" / "f""u""n""c""t""i""o""n" / "v""a""r") !(W ) ;
Declaration = (FunctionDeclaration  / VariableDeclaration ) ;
FunctionDeclaration = "f""u""n""c""t""i""o""n"!(W ) UB Identifier UB "("UB FunctionParamList ")"UB Block ;
FunctionParamList = (FunctionParam (","UB FunctionParam )* )? ;
FunctionParam = Identifier UB ;
VariableDeclaration = "v""a""r"!(W ) UB VariableList ";"UB ;
VariableList = InitDecl (","UB InitDecl )* ;
InitDecl = Identifier ("="!("=") UB Initializer )? UB ;
Initializer = AssignmentExpression ;
Block = "{"UB ((Statement UB  / Declaration UB ) )* "}"UB ;
Statement = (Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""1"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""2"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""3"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""4"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""5"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""6"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""7"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""8"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""9"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""A"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""B"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block "e""l""s""e""C"UB Block  / "i""f"!(W ) UB "("UB Expression ")"UB Block ("e""l""s""e"!(W ) UB Block )?  / "r""e""t""u""r""n"!(W ) UB (Expression )? ";"UB  / Expression ";"UB ) ;
Expression = AssignmentExpression (","UB AssignmentExpression )* ;
AssignmentExpression = (UnaryExpression UBAssignmentOperator AssignmentExpression  / ConditionalExpression ) ;
UBAssignmentOperator = ("="!("=") UB  / "*""="UB  / "/""="UB  / "%""="UB  / "+""="UB  / "-""="UB  / "<""<""="UB  / ">"">""="UB  / ">"">"">""="UB  / "&""="UB  / "^""="UB  / "|""="UB ) ;
ConstantExpression = ConditionalExpression ;
ConditionalExpression = LogicalOrExpression ("?"UB Expression ":"!(">") UB LogicalOrExpression )* ;
LogicalOrExpression = LogicalAndExpression ("|""|"UB LogicalAndExpression )* ;
LogicalAndExpression = EqualityExpression ("&""&"UB EqualityExpression )* ;
EqualityExpression = RelationalExpression (("=""="UB  / "!""="UB ) RelationalExpression )* ;
RelationalExpression = UnaryExpression (("<"!("=") UB  / "<""="!("=") UB  / ">"!("=") UB  / ">""="!("=") UB ) UnaryExpression )* ;
UnaryExpression = (PostfixExpression  / "!"!("=") UB UnaryExpression ) ;
PostfixExpression = (FunctionCall  / PrimaryExpression ) ;
FunctionCall = PrimaryExpression (UBFunctionCall )+ ;
UBFunctionCall = "("UB (UBArgumentExpressionList )? ")"UB ;
UBArgumentExpressionList = AssignmentExpression (","UB AssignmentExpression )* ;
PrimaryExpression = (Constant  / "("UB Expression ")"UB  / FunctionExpression  / Identifier ) ;
FunctionExpression = "f""u""n""c""t""i""o""n"!(W ) UB (Identifier UB )? "("UB FunctionParamList ")"UB Block ":"":"UB ;
Constant = (IntegerLiteral  / BooleanLiteral  / StringLiteral  / NullLiteral ) ;
IntegerLiteral = DECIMAL UB ;
DECIMAL = ([1-9] (DIGIT )*  / "0") ;
BooleanLiteral = ("t""r""u""e"!(W ) UB  / "f""a""l""s""e"!(W ) UB ) ;
StringLiteral = "\""(STRINGUBCONTENT )* "\""UB ;
STRINGUBCONTENT = !("\n" / "\"" / "\\" ) _;
NullLiteral = "n""u""l""l"!(W ) UB ;
