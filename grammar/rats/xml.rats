
// This is a Grammar for Rats! generated by Nez Grammar Generator.

module xml;

public generic File
   = PROLOG? (DTD? Xml)
   ;
public generic PROLOG
   = void:'<' (void:'?' (void:'x' (void:'m' (void:'l' (Alt1_0* (void:'?' (void:'>' S*)))))))
   ;
generic Alt1_0
   = !Alt1_1 _
   ;
generic Alt1_1
   = void:"?>"
   ;
public generic S
   = void:' '
   / void:'\t'
   / void:'\r'
   / void:'\n'
   ;
public generic DTD
   = void:'<' (void:'!' (Alt3_0* (void:'>' S*)))
   ;
generic Alt3_0
   = !(void:'>') _
   ;
public generic Xml
   =  '<' Name S* Alt4_0* Alt4_1  S*
   ;
generic Alt4_1
   =  ("/>" / '>' S* (Content / COMMENT)* ('<' ('/' Name '>')))
   ;
generic Alt4_0
   = Attribute
   ;
public generic Name
   =  NAME
   ;
public generic NAME
   = (void:[A-Z] / void:'_' / void:[a-z] / void:':') (void:'-' / void:'.' / void:[0-9] / void:':' / void:[A-Z] / void:'_' / void:[a-z])*
   ;
public generic Attribute
   =  (Name (S* (void:'=' (S* (String ( ( S*)))))))
   ;
public generic String
   = void:'"' ( (Alt8_0* ( ( void:'"'))))
   ;
generic Alt8_0
   = !(void:'"') _
   ;
public generic Content
   = Xml
   / CDataSec
   / Text
   ;
public generic CDataSec
   = void:'<' (void:'!' (void:'[' (void:'C' (void:'D' (void:'A' (void:'T' (void:'A' (void:'[' ( (CDATA ( ( (void:']' (void:']' (void:'>' S*)))))))))))))))
   ;
public generic CDATA
   = Alt11_0* Alt11_1?
   ;
generic Alt11_0
   = !Alt11_2 (!Alt11_3 _)
   ;
generic Alt11_1
   = void:'<' (void:'!' (void:'[' (void:'C' (void:'D' (void:'A' (void:'T' (void:'A' (void:'[' (CDATA (void:']' (void:']' (void:'>' CDATA))))))))))))
   ;
generic Alt11_2
   = void:']' (void:"]>")
   ;
generic Alt11_3
   = void:'<' (void:'!' (void:'[' (void:'C' (void:'D' (void:'A' (void:'T' (void:"A[")))))))
   ;
public generic Text
   =  (Alt12_0+ ( ))
   ;
generic Alt12_0
   = !(void:'<') _
   ;
public generic COMMENT
   = void:'<' (void:'!' (void:'-' (void:'-' (Alt13_0* (void:'-' (void:'-' (void:'>' S*)))))))
   ;
generic Alt13_0
   = !Alt13_1 _
   ;
generic Alt13_1
   = void:'-' (void:"->")
   ;
