
// This is a Grammar for Rats! generated by Nez Grammar Generator.

module js;

public generic File
   = FileAndInOperator
   ;
public generic FileAndInOperator
   =  (Alt0_0* (UBUB ( )))
   ;
generic Alt0_0
   = UBUB SourceElementAndInOperator
   ;
public void UBUB
   = (SPACE / LINEUBTERMINATORUBSEQUENCE / COMMENT)*
   ;
public void SPACE
   = void:'\t'
   / void:' '
   / void:" "
   ;
public generic LINEUBTERMINATORUBSEQUENCE
   = void:'\n'
   / void:"\n"   / void:'\r'
   ;
public generic COMMENT
   = MULTIUBLINEUBCOMMENT
   / SINGLEUBLINEUBCOMMENT
   ;
public generic MULTIUBLINEUBCOMMENT
   = void:'/' (void:'*' (Alt5_0* (void:"*/")))
   ;
generic Alt5_0
   = !Alt5_1 _
   ;
generic Alt5_1
   = void:"*/"
   ;
public generic SINGLEUBLINEUBCOMMENT
   = void:'/' (void:'/' Alt6_0*)
   ;
generic Alt6_0
   = !LINEUBTERMINATOR _
   ;
public void LINEUBTERMINATOR
   = void:'\n'
   / void:'\r'
   ;
public generic SourceElementAndInOperator
   = StatementAndInOperator
   ;
public generic StatementAndInOperator
   = BlockAndInOperator
   / EmptyStatement
   / VariableStatementAndInOperator
   / IfStatementAndInOperator
   / DoWhileStatementAndInOperator
   / WhileStatementAndInOperator
   / ForStatementAndInOperator
   / ForEachStatementAndInOperator
   / ContinueStatement
   / BreakStatement
   / ReturnStatementAndInOperator
   / WithStatementAndInOperator
   / LabelledStatementAndInOperator
   / SwitchStatementAndInOperator
   / ThrowStatementAndInOperator
   / TryStatementAndInOperator
   / DebuggerStatement
   / FunctionDeclarationAndInOperator
   / ExpressionStatementAndInOperator
   ;
public generic BlockAndInOperator
   = FunctionBodyAndInOperator
   ;
public generic FunctionBodyAndInOperator
   = void:'{' ( (Alt11_0* ( ( (UBUB void:'}')))))
   ;
generic Alt11_0
   = UBUB SourceElementAndInOperator
   ;
public generic EmptyStatement
   =  (void:';' ( ))
   ;
public generic VariableStatementAndInOperator
   =  (void:'v' (void:'a' (void:'r' (!W (UBUB (VariableDeclarationListAndInOperator (EOS ( ))))))))
   ;
public generic W
   = void:[a-z]
   / void:[A-Z]
   / void:[0-9]
   / void:'_'
   / UCHAR
   ;
public generic UCHAR
   = void:'\\' (void:'u' HEX4)
   / void:'\\' (void:'U' (HEX4 HEX4))
   ;
public generic HEX4
   = HEX (HEX (HEX HEX))
   ;
public generic HEX
   = void:[A-F]
   / void:[a-f]
   / void:[0-9]
   ;
public generic VariableDeclarationListAndInOperator
   =  (VariableDeclarationAndInOperator (Alt18_0* ( )))
   ;
generic Alt18_0
   = UBUB (void:',' (UBUB VariableDeclarationAndInOperator))
   ;
public generic VariableDeclarationAndInOperator
   =  (Identifier (Alt19_0? ( )))
   ;
generic Alt19_0
   = UBUB addInitialiserAndInOperator
   ;
public generic Identifier
   = !KEYWORD IdentifierName
   ;
public generic KEYWORD
   = void:'b' (void:'r' (void:'e' (void:'a' (void:'k' !W))))
   / void:'c' (void:'a' (void:'s' (void:'e' !W)))
   / void:'c' (void:'a' (void:'t' (void:'c' (void:'h' !W))))
   / void:'c' (void:'o' (void:'n' (void:'t' (void:'i' (void:'n' (void:'u' (void:'e' !W)))))))
   / void:'d' (void:'e' (void:'b' (void:'u' (void:'g' (void:'g' (void:'e' (void:'r' !W)))))))
   / void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' !W))))))
   / void:'d' (void:'e' (void:'l' (void:'e' (void:'t' (void:'e' !W)))))
   / void:'d' (void:'o' !W)
   / void:'e' (void:'l' (void:'s' (void:'e' !W)))
   / void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (void:'l' (void:'y' !W))))))
   / void:'f' (void:'o' (void:'r' !W))
   / void:'f' (void:'u' (void:'n' (void:'c' (void:'t' (void:'i' (void:'o' (void:'n' !W)))))))
   / void:'i' (void:'f' !W)
   / void:'i' (void:'n' !W)
   / void:'i' (void:'n' (void:'s' (void:'t' (void:'a' (void:'n' (void:'c' (void:'e' (void:'o' (void:'f' !W)))))))))
   / void:'n' (void:'e' (void:'w' !W))
   / void:'r' (void:'e' (void:'t' (void:'u' (void:'r' (void:'n' !W)))))
   / void:'s' (void:'w' (void:'i' (void:'t' (void:'c' (void:'h' !W)))))
   / void:'t' (void:'h' (void:'i' (void:'s' !W)))
   / void:'t' (void:'h' (void:'r' (void:'o' (void:'w' !W))))
   / void:'t' (void:'r' (void:'y' !W))
   / void:'t' (void:'y' (void:'p' (void:'e' (void:'o' (void:'f' !W)))))
   / void:'v' (void:'a' (void:'r' !W))
   / void:'v' (void:'o' (void:'i' (void:'d' !W)))
   / void:'w' (void:'h' (void:'i' (void:'l' (void:'e' !W))))
   / void:'w' (void:'i' (void:'t' (void:'h' !W)))
   / void:'c' (void:'l' (void:'a' (void:'s' (void:'s' !W))))
   / void:'e' (void:'n' (void:'u' (void:'m' !W)))
   / void:'e' (void:'x' (void:'p' (void:'o' (void:'r' (void:'t' !W)))))
   / void:'e' (void:'x' (void:'t' (void:'e' (void:'n' (void:'d' (void:'s' !W))))))
   / void:'i' (void:'m' (void:'p' (void:'o' (void:'r' (void:'t' !W)))))
   / void:'s' (void:'u' (void:'p' (void:'e' (void:'r' !W))))
   / void:'i' (void:'m' (void:'p' (void:'l' (void:'e' (void:'m' (void:'e' (void:'n' (void:'t' (void:'s' !W)))))))))
   / void:'i' (void:'n' (void:'t' (void:'e' (void:'r' (void:'f' (void:'a' (void:'c' (void:'e' !W))))))))
   / void:'l' (void:'e' (void:'t' !W))
   / void:'p' (void:'a' (void:'c' (void:'k' (void:'a' (void:'g' (void:'e' !W))))))
   / void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' !W))))))
   / void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' !W))))))))
   / void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' !W)))))
   / void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' !W)))))
   / void:'y' (void:'i' (void:'e' (void:'l' (void:'d' !W))))
   / void:'n' (void:'u' (void:'l' (void:'l' !W)))
   / void:'t' (void:'r' (void:'u' (void:'e' !W)))
   / void:'f' (void:'a' (void:'l' (void:'s' (void:'e' !W))))
   ;
public generic IdentifierName
   =  (IDENTIFIERUBSTART (IDENTIFIERUBPART* ( )))
   ;
public generic IDENTIFIERUBSTART
   = UNICODEUBLETTER
   / void:'$'
   / void:'_'
   / UCHAR
   ;
public generic UNICODEUBLETTER
   = UCUBLU
   / UCUBLL
   / UCUBLT
   / UCUBLM
   / UCUBLO
   ;
public generic UCUBLU
   = void:[A-Z]
   / void:"Ā"
   / void:"Ă"
   / void:"Ą"
   / void:"Ć"
   / void:"Ĉ"
   / void:"Ċ"
   / void:"Č"
   / void:"Ď"
   / void:"Đ"
   / void:"Ē"
   / void:"Ĕ"
   / void:"Ė"
   / void:"Ę"
   / void:"Ě"
   / void:"Ĝ"
   / void:"Ğ"
   / void:"Ġ"
   / void:"Ģ"
   / void:"Ĥ"
   / void:"Ħ"
   / void:"Ĩ"
   / void:"Ī"
   / void:"Ĭ"
   / void:"Į"
   / void:"İ"
   / void:"Ĳ"
   / void:"Ĵ"
   / void:"Ķ"
   / void:"Ĺ"
   / void:"Ļ"
   / void:"Ľ"
   / void:"Ŀ"
   / void:"Ł"
   / void:"Ń"
   / void:"Ņ"
   / void:"Ň"
   / void:"Ŋ"
   / void:"Ō"
   / void:"Ŏ"
   / void:"Ő"
   / void:"Œ"
   / void:"Ŕ"
   / void:"Ŗ"
   / void:"Ř"
   / void:"Ś"
   / void:"Ŝ"
   / void:"Ş"
   / void:"Š"
   / void:"Ţ"
   / void:"Ť"
   / void:"Ŧ"
   / void:"Ũ"
   / void:"Ū"
   / void:"Ŭ"
   / void:"Ů"
   / void:"Ű"
   / void:"Ų"
   / void:"Ŵ"
   / void:"Ŷ"
   / void:"Ż"
   / void:"Ž"
   / void:"Ƅ"
   / void:"Ƣ"
   / void:"Ƥ"
   / void:"Ʃ"
   / void:"Ƭ"
   / void:"Ƶ"
   / void:"Ƽ"
   / void:"Ǆ"
   / void:"Ǉ"
   / void:"Ǌ"
   / void:"Ǎ"
   / void:"Ǐ"
   / void:"Ǒ"
   / void:"Ǔ"
   / void:"Ǖ"
   / void:"Ǘ"
   / void:"Ǚ"
   / void:"Ǜ"
   / void:"Ǟ"
   / void:"Ǡ"
   / void:"Ǣ"
   / void:"Ǥ"
   / void:"Ǧ"
   / void:"Ǩ"
   / void:"Ǫ"
   / void:"Ǭ"
   / void:"Ǯ"
   / void:"Ǳ"
   / void:"Ǵ"
   / void:"Ǻ"
   / void:"Ǽ"
   / void:"Ǿ"
   / void:"Ȁ"
   / void:"Ȃ"
   / void:"Ȅ"
   / void:"Ȇ"
   / void:"Ȉ"
   / void:"Ȋ"
   / void:"Ȍ"
   / void:"Ȏ"
   / void:"Ȑ"
   / void:"Ȓ"
   / void:"Ȕ"
   / void:"Ȗ"
   / void:"Ș"
   / void:"Ț"
   / void:"Ȝ"
   / void:"Ȟ"
   / void:"Ƞ"
   / void:"Ȣ"
   / void:"Ȥ"
   / void:"Ȧ"
   / void:"Ȩ"
   / void:"Ȫ"
   / void:"Ȭ"
   / void:"Ȯ"
   / void:"Ȱ"
   / void:"Ȳ"
   / void:"Ɂ"
   / void:"Ɉ"
   / void:"Ɋ"
   / void:"Ɍ"
   / void:"Ɏ"
   / void:"Ͱ"
   / void:"Ͳ"
   / void:"Ͷ"
   / void:"Ά"
   / void:"Ό"
   / void:"Ϗ"
   / void:"Ϙ"
   / void:"Ϛ"
   / void:"Ϝ"
   / void:"Ϟ"
   / void:"Ϡ"
   / void:"Ϣ"
   / void:"Ϥ"
   / void:"Ϧ"
   / void:"Ϩ"
   / void:"Ϫ"
   / void:"Ϭ"
   / void:"Ϯ"
   / void:"ϴ"
   / void:"Ϸ"
   / void:"Ѡ"
   / void:"Ѣ"
   / void:"Ѥ"
   / void:"Ѧ"
   / void:"Ѩ"
   / void:"Ѫ"
   / void:"Ѭ"
   / void:"Ѯ"
   / void:"Ѱ"
   / void:"Ѳ"
   / void:"Ѵ"
   / void:"Ѷ"
   / void:"Ѹ"
   / void:"Ѻ"
   / void:"Ѽ"
   / void:"Ѿ"
   / void:"Ҁ"
   / void:"Ҋ"
   / void:"Ҍ"
   / void:"Ҏ"
   / void:"Ґ"
   / void:"Ғ"
   / void:"Ҕ"
   / void:"Җ"
   / void:"Ҙ"
   / void:"Қ"
   / void:"Ҝ"
   / void:"Ҟ"
   / void:"Ҡ"
   / void:"Ң"
   / void:"Ҥ"
   / void:"Ҧ"
   / void:"Ҩ"
   / void:"Ҫ"
   / void:"Ҭ"
   / void:"Ү"
   / void:"Ұ"
   / void:"Ҳ"
   / void:"Ҵ"
   / void:"Ҷ"
   / void:"Ҹ"
   / void:"Һ"
   / void:"Ҽ"
   / void:"Ҿ"
   / void:"Ӄ"
   / void:"Ӆ"
   / void:"Ӈ"
   / void:"Ӊ"
   / void:"Ӌ"
   / void:"Ӎ"
   / void:"Ӑ"
   / void:"Ӓ"
   / void:"Ӕ"
   / void:"Ӗ"
   / void:"Ә"
   / void:"Ӛ"
   / void:"Ӝ"
   / void:"Ӟ"
   / void:"Ӡ"
   / void:"Ӣ"
   / void:"Ӥ"
   / void:"Ӧ"
   / void:"Ө"
   / void:"Ӫ"
   / void:"Ӭ"
   / void:"Ӯ"
   / void:"Ӱ"
   / void:"Ӳ"
   / void:"Ӵ"
   / void:"Ӷ"
   / void:"Ӹ"
   / void:"Ӻ"
   / void:"Ӽ"
   / void:"Ӿ"
   / void:"Ԁ"
   / void:"Ԃ"
   / void:"Ԅ"
   / void:"Ԇ"
   / void:"Ԉ"
   / void:"Ԋ"
   / void:"Ԍ"
   / void:"Ԏ"
   / void:"Ԑ"
   / void:"Ԓ"
   / void:"Ԕ"
   / void:"Ԗ"
   / void:"Ԙ"
   / void:"Ԛ"
   / void:"Ԝ"
   / void:"Ԟ"
   / void:"Ԡ"
   / void:"Ԣ"
   / void:"Ԥ"
   / void:"Ԧ"

   ;
public generic UCUBLL
   = void:[a-z]
   / void:"µ"
   / void:"ā"
   / void:"ă"
   / void:"ą"
   / void:"ć"
   / void:"ĉ"
   / void:"ċ"
   / void:"č"
   / void:"ď"
   / void:"đ"
   / void:"ē"
   / void:"ĕ"
   / void:"ė"
   / void:"ę"
   / void:"ě"
   / void:"ĝ"
   / void:"ğ"
   / void:"ġ"
   / void:"ģ"
   / void:"ĥ"
   / void:"ħ"
   / void:"ĩ"
   / void:"ī"
   / void:"ĭ"
   / void:"į"
   / void:"ı"
   / void:"ĳ"
   / void:"ĵ"
   / void:"ĺ"
   / void:"ļ"
   / void:"ľ"
   / void:"ŀ"
   / void:"ł"
   / void:"ń"
   / void:"ņ"
   / void:"ŋ"
   / void:"ō"
   / void:"ŏ"
   / void:"ő"
   / void:"œ"
   / void:"ŕ"
   / void:"ŗ"
   / void:"ř"
   / void:"ś"
   / void:"ŝ"
   / void:"ş"
   / void:"š"
   / void:"ţ"
   / void:"ť"
   / void:"ŧ"
   / void:"ũ"
   / void:"ū"
   / void:"ŭ"
   / void:"ů"
   / void:"ű"
   / void:"ų"
   / void:"ŵ"
   / void:"ŷ"
   / void:"ź"
   / void:"ż"
   / void:"ƀ"
   / void:"ƃ"
   / void:"ƅ"
   / void:"ƈ"
   / void:"ƒ"
   / void:"ƕ"
   / void:"ƞ"
   / void:"ơ"
   / void:"ƣ"
   / void:"ƥ"
   / void:"ƨ"
   / void:"ƭ"
   / void:"ư"
   / void:"ƴ"
   / void:"ƶ"
   / void:"ǆ"
   / void:"ǉ"
   / void:"ǌ"
   / void:"ǎ"
   / void:"ǐ"
   / void:"ǒ"
   / void:"ǔ"
   / void:"ǖ"
   / void:"ǘ"
   / void:"ǚ"
   / void:"ǟ"
   / void:"ǡ"
   / void:"ǣ"
   / void:"ǥ"
   / void:"ǧ"
   / void:"ǩ"
   / void:"ǫ"
   / void:"ǭ"
   / void:"ǳ"
   / void:"ǵ"
   / void:"ǹ"
   / void:"ǻ"
   / void:"ǽ"
   / void:"ǿ"
   / void:"ȁ"
   / void:"ȃ"
   / void:"ȅ"
   / void:"ȇ"
   / void:"ȉ"
   / void:"ȋ"
   / void:"ȍ"
   / void:"ȏ"
   / void:"ȑ"
   / void:"ȓ"
   / void:"ȕ"
   / void:"ȗ"
   / void:"ș"
   / void:"ț"
   / void:"ȝ"
   / void:"ȟ"
   / void:"ȡ"
   / void:"ȣ"
   / void:"ȥ"
   / void:"ȧ"
   / void:"ȩ"
   / void:"ȫ"
   / void:"ȭ"
   / void:"ȯ"
   / void:"ȱ"
   / void:"ȼ"
   / void:"ȿ"
   / void:"ɀ"
   / void:"ɂ"
   / void:"ɇ"
   / void:"ɉ"
   / void:"ɋ"
   / void:"ɍ"
   / void:"ͱ"
   / void:"ͳ"
   / void:"ͷ"
   / void:"ΐ"
   / void:"ϙ"
   / void:"ϛ"
   / void:"ϝ"
   / void:"ϟ"
   / void:"ϡ"
   / void:"ϣ"
   / void:"ϥ"
   / void:"ϧ"
   / void:"ϩ"
   / void:"ϫ"
   / void:"ϭ"
   / void:"ϵ"
   / void:"ϸ"
   / void:"ѡ"
   / void:"ѣ"
   / void:"ѥ"
   / void:"ѧ"
   / void:"ѩ"
   / void:"ѫ"
   / void:"ѭ"
   / void:"ѯ"
   / void:"ѱ"
   / void:"ѳ"
   / void:"ѵ"
   / void:"ѷ"
   / void:"ѹ"
   / void:"ѻ"
   / void:"ѽ"
   / void:"ѿ"
   / void:"ҁ"
   / void:"ҋ"
   / void:"ҍ"
   / void:"ҏ"
   / void:"ґ"
   / void:"ғ"
   / void:"ҕ"
   / void:"җ"
   / void:"ҙ"
   / void:"қ"
   / void:"ҝ"
   / void:"ҟ"
   / void:"ҡ"
   / void:"ң"
   / void:"ҥ"
   / void:"ҧ"
   / void:"ҩ"
   / void:"ҫ"
   / void:"ҭ"
   / void:"ү"
   / void:"ұ"
   / void:"ҳ"
   / void:"ҵ"
   / void:"ҷ"
   / void:"ҹ"
   / void:"һ"
   / void:"ҽ"
   / void:"ҿ"
   / void:"ӂ"
   / void:"ӄ"
   / void:"ӆ"
   / void:"ӈ"
   / void:"ӊ"
   / void:"ӌ"
   / void:"ӑ"
   / void:"ӓ"
   / void:"ӕ"
   / void:"ӗ"
   / void:"ә"
   / void:"ӛ"
   / void:"ӝ"
   / void:"ӟ"
   / void:"ӡ"
   / void:"ӣ"
   / void:"ӥ"
   / void:"ӧ"
   / void:"ө"
   / void:"ӫ"
   / void:"ӭ"
   / void:"ӯ"
   / void:"ӱ"
   / void:"ӳ"
   / void:"ӵ"
   / void:"ӷ"
   / void:"ӹ"
   / void:"ӻ"
   / void:"ӽ"
   / void:"ӿ"
   / void:"ԁ"
   / void:"ԃ"
   / void:"ԅ"
   / void:"ԇ"
   / void:"ԉ"
   / void:"ԋ"
   / void:"ԍ"
   / void:"ԏ"
   / void:"ԑ"
   / void:"ԓ"
   / void:"ԕ"
   / void:"ԗ"
   / void:"ԙ"
   / void:"ԛ"
   / void:"ԝ"
   / void:"ԟ"
   / void:"ԡ"
   / void:"ԣ"
   / void:"ԥ"
   / void:"ԧ"
   ;
public generic UCUBLT
   = void:"ǅ"
   / void:"ǈ"
   / void:"ǋ"
   / void:"ǲ"
   ;
public generic UCUBLM
   =
    void:"ˬ"
   / void:"ˮ"
   / void:"ʹ"
   / void:"ͺ"
   / void:"ՙ"
   / void:"ـ"
   / void:"ߺ"
   ;
public generic UCUBLO
   = void:"ª"
   / void:"º"
   / void:"ƻ"
   / void:"ʔ"
   / void:"ە"
   / void:"ۿ"
   / void:"ܐ"
   / void:"ޱ"
   ;
public generic IDENTIFIERUBPART
   = IDENTIFIERUBSTART
   / UNICODEUBCOMBININGUBMARK
   / UNICODEUBDIGIT
   / UNICODEUBCONNECTORUBPUNCTUATION
   ;
public generic UNICODEUBCOMBININGUBMARK
   = UCUBMN
   ;
public generic UCUBMN
   =  void:"ֿ"
   / void:"ׇ"
   / void:"ٰ"
   / void:"ܑ"
   ;

public generic UNICODEUBDIGIT
   = UCUBND
   ;
public generic UCUBND
   = void:[0-9]
   ;
public generic UNICODEUBCONNECTORUBPUNCTUATION
   = UCUBPC
   ;
public generic UCUBPC
   = void:'_'
   ;
public generic addInitialiserAndInOperator
   = void:'=' (UBUB AssignmentExpressionAndInOperator)
   ;
public generic AssignmentExpressionAndInOperator
   =  (LeftHandSideExpressionAndInOperator (UBUB (addAssignmentOperator (UBUB (AssignmentExpressionAndInOperator )))))
   / ConditionalExpressionAndInOperator
   ;
public generic LeftHandSideExpressionAndInOperator
   = CallExpressionAndInOperator
   / NewExpressionAndInOperator
   ;
public generic CallExpressionAndInOperator
   = MemberExpressionAndInOperator Alt42_0*
   ;
generic Alt42_0
   =  (UBUB (addCallOrMemberOperatorAndInOperator ))
   ;
public generic MemberExpressionAndInOperator
   = PrimaryExpressionAndInOperator Alt43_0*
   ;
generic Alt43_0
   =  (UBUB (addMemberOperatorAndInOperator ))
   ;
public generic PrimaryExpressionAndInOperator
   = ThisExpression
   / void:'(' (UBUB (ExpressionAndInOperator (UBUB void:')')))
   / Literal
   / ArrayLiteralAndInOperator
   / ObjectLiteralAndInOperator
   / FunctionExpressionAndInOperator
   / NewExpressionWithArgsAndInOperator
   / Identifier
   ;
public generic ThisExpression
   =  (void:'t' (void:'h' (void:'i' (void:'s' (!W ( ))))))
   ;
public generic ExpressionAndInOperator
   = AssignmentExpressionAndInOperator Alt46_0*
   ;
generic Alt46_0
   =  (UBUB (void:',' (UBUB (AssignmentExpressionAndInOperator ( )))))
   ;
public generic Literal
   = NullLiteral
   / BooleanLiteral
   / NumericLiteral
   / StringLiteral
   / RegularExpressionLiteral
   ;
public generic NullLiteral
   =  (void:'n' (void:'u' (void:'l' (void:'l' (!W ( ))))))
   ;
public generic BooleanLiteral
   =  (void:'t' (void:'r' (void:'u' (void:'e' (!W ( ))))))
   /  (void:'f' (void:'a' (void:'l' (void:'s' (void:'e' (!W ( )))))))
   ;
public generic NumericLiteral
   = HexIntegerLiteral
   / FloatingPointLiteral
   / OctaIntegerLiteral
   / DecimalIntegerLiteral
   ;
public generic HexIntegerLiteral
   =  (void:'0' ((void:'x' / void:'X') (HEX* ( ))))
   ;
public generic FloatingPointLiteral
   =  (DECIMALUBINTEGER? (void:'.' (DIGIT+ (EXPONENTUBPART? ( )))))
   /  (DECIMALUBINTEGER (EXPONENTUBPART ( )))
   ;
public generic DECIMALUBINTEGER
   = void:[1-9] DIGIT*
   / void:'0'
   ;
public generic DIGIT
   = void:[0-9]
   ;
public generic EXPONENTUBPART
   = (void:'e' / void:'E') (SIGN? DECIMALUBINTEGER)
   ;
public generic SIGN
   = void:'+'
   / void:'-'
   ;
public generic OctaIntegerLiteral
   =  (void:'0' (OCT* ( )))
   ;
public generic OCT
   = void:[0-7]
   ;
public generic DecimalIntegerLiteral
   =  (DECIMALUBINTEGER ( ))
   ;
public generic StringLiteral
   = void:'"' ( (DOUBLEUBSTRINGUBCHARACTER* ( ( void:'"'))))
   / void:'\'' ( (SINGLEUBSTRINGUBCHARACTER* ( ( void:'\''))))
   ;
public generic DOUBLEUBSTRINGUBCHARACTER
   = !(void:'"' / void:'\\' / LINEUBTERMINATOR) _
   / void:'\\' ESCAPEUBSEQUENCE
   ;
public generic ESCAPEUBSEQUENCE
   = void:'\\'
   / void:'"'
   / void:'\''
   / void:'b'
   / void:'f'
   / void:'n'
   / void:'r'
   / void:'t'
   / void:'v'
   / OCTAUBESCAPEUBSEQUENCE
   / HEXUBESCAPEUBSEQUENCE
   / UNICODEUBESCAPEUBSEQUUENCE
   / LINEUBTERMINATORUBSEQUENCE
   / _
   ;
public generic OCTAUBESCAPEUBSEQUENCE
   = OCT (OCT OCT)
   ;
public generic HEXUBESCAPEUBSEQUENCE
   = (void:'x' / void:'X') (HEX HEX)
   ;
public generic UNICODEUBESCAPEUBSEQUUENCE
   = (void:'u' / void:'U') HEX4
   ;
public generic SINGLEUBSTRINGUBCHARACTER
   = !(void:'\'' / void:'\\' / LINEUBTERMINATOR) _
   / void:'\\' ESCAPEUBSEQUENCE
   ;
public generic RegularExpressionLiteral
   =  (void:'/' (REGEXUBBODY (void:'/' (REGEXUBFLAGS ( )))))
   ;
public generic REGEXUBBODY
   = REGEXUBFIRSTUBCHAR REGEXUBCHAR*
   ;
public generic REGEXUBFIRSTUBCHAR
   = REGEXUBBACKSLASHUBSEQUENCE
   / !(void:'*' / void:'\\' / void:'/' / void:'[') REGEXUBNONUBTERMINATOR
   / REGEXUBCLASS
   ;
public generic REGEXUBBACKSLASHUBSEQUENCE
   = void:'\\' REGEXUBNONUBTERMINATOR
   ;
public generic REGEXUBNONUBTERMINATOR
   = !LINEUBTERMINATOR _
   ;
public generic REGEXUBCLASS
   = void:'[' (REGEXUBCLASSUBCHAR* void:']')
   ;
public generic REGEXUBCLASSUBCHAR
   = !(void:']' / void:'\\') REGEXUBNONUBTERMINATOR
   / REGEXUBBACKSLASHUBSEQUENCE
   ;
public generic REGEXUBCHAR
   = void:'*'
   / REGEXUBFIRSTUBCHAR
   ;
public generic REGEXUBFLAGS
   = (void:'g' / void:'i' / void:'m' / void:'s' / void:'y')*
   ;
public generic ArrayLiteralAndInOperator
   =  (void:'[' (UBUB ((Alt76_0? void:']' / addElementListAndInOperator (addArrayDelimitor? (UBUB void:']'))) ( ))))
   ;
generic Alt76_0
   = addElisionList UBUB
   ;
public generic addElisionList
   = ElisionExpression Alt77_0*
   ;
generic Alt77_0
   = UBUB ElisionExpression
   ;
public generic ElisionExpression
   = void:',' ( ( ))
   ;
public generic addElementListAndInOperator
   = Alt79_0? (AssignmentExpressionAndInOperator Alt79_1*)
   ;
generic Alt79_0
   = addElisionList UBUB
   ;
generic Alt79_1
   = addArrayDelimitor AssignmentExpressionAndInOperator
   ;
public generic addArrayDelimitor
   = UBUB (void:',' (UBUB Alt80_0?))
   ;
generic Alt80_0
   = addElisionList UBUB
   ;
public generic ObjectLiteralAndInOperator
   =  (void:'{' (UBUB (Alt81_0? (void:'}' ( )))))
   ;
generic Alt81_0
   = addPropertyListAndInOperator (UBUB Alt81_1?)
   ;
generic Alt81_1
   = void:',' UBUB
   ;
public generic addPropertyListAndInOperator
   = PropertyAssignmentAndInOperator Alt82_0*
   ;
generic Alt82_0
   = UBUB (void:',' (UBUB PropertyAssignmentAndInOperator))
   ;
public generic PropertyAssignmentAndInOperator
   =  (PropertyName (UBUB (void:':' (UBUB (AssignmentExpressionAndInOperator ( ))))))
   /  (void:'g' (void:'e' (void:'t' (!W (UBUB (PropertyName (UBUB (void:'(' (UBUB (void:')' (UBUB (FunctionBodyAndInOperator ( )))))))))))))
   /  (void:'s' (void:'e' (void:'t' (!W (UBUB (PropertyName (UBUB (void:'(' (UBUB (Identifier (UBUB (void:')' (UBUB (FunctionBodyAndInOperator ( )))))))))))))))
   ;
public generic PropertyName
   = StringLiteral
   / NumericLiteral
   / IdentifierName
   ;
public generic FunctionExpressionAndInOperator
   =  (void:'f' (void:'u' (void:'n' (void:'c' (void:'t' (void:'i' (void:'o' (void:'n' (!W (UBUB (Alt85_0? (FunctionParameterList (UBUB (FunctionBodyAndInOperator ( )))))))))))))))
   ;
generic Alt85_0
   = Identifier UBUB
   ;
public generic FunctionParameterList
   = void:'(' (UBUB ( (Alt86_0? ( ( (UBUB void:')'))))))
   ;
generic Alt86_0
   = Identifier Alt86_1*
   ;
generic Alt86_1
   = UBUB (void:',' (UBUB Identifier))
   ;
public generic NewExpressionWithArgsAndInOperator
   =  (void:'n' (void:'e' (void:'w' (!W (UBUB (MemberExpressionAndInOperator (UBUB (ArgumentsAndInOperator ( )))))))))
   ;
public generic ArgumentsAndInOperator
   =  (void:'(' (UBUB (Alt88_0? (void:')' ( )))))
   ;
generic Alt88_0
   = addArgumentListAndInOperator UBUB
   ;
public generic addArgumentListAndInOperator
   = AssignmentExpressionAndInOperator Alt89_0*
   ;
generic Alt89_0
   = UBUB (void:',' (UBUB AssignmentExpressionAndInOperator))
   ;
public generic addMemberOperatorAndInOperator
   = void:'.' (UBUB (IdentifierName ))
   / void:'[' (UBUB (ExpressionAndInOperator (UBUB (void:']' ))))
   ;
public generic addCallOrMemberOperatorAndInOperator
   = void:'.' (UBUB (IdentifierName ))
   / ArgumentsAndInOperator
   / void:'[' (UBUB (ExpressionAndInOperator (UBUB (void:']' ))))
   ;
public generic NewExpressionAndInOperator
   = MemberExpressionAndInOperator
   /  (void:'n' (void:'e' (void:'w' (!W (UBUB (NewExpressionAndInOperator ( )))))))
   ;
public generic addAssignmentOperator
   = void:'='
   / void:'*' (void:'=' )
   / void:'/' (void:'=' )
   / void:'%' (void:'=' )
   / void:'+' (void:'=' )
   / void:'-' (void:'=' )
   / void:'<' (void:'<' (void:'=' ))
   / void:'>' (void:'>' (void:'='  / void:'>' (void:'=' )))
   / void:'&' (void:'=' )
   / void:'^' (void:'=' )
   / void:'|' (void:'=' )
   ;
public generic ConditionalExpressionAndInOperator
   = LogicalOrExpressionAndInOperator Alt94_0*
   ;
generic Alt94_0
   =  (UBUB (void:'?' (UBUB (AssignmentExpressionAndInOperator (UBUB (void:':' (UBUB (AssignmentExpressionAndInOperator ( )))))))))
   ;
public generic LogicalOrExpressionAndInOperator
   = LogicalAndExpressionAndInOperator Alt95_0*
   ;
generic Alt95_0
   =  (UBUB (void:'|' (void:'|' (UBUB (LogicalAndExpressionAndInOperator ( ))))))
   ;
public generic LogicalAndExpressionAndInOperator
   = BitwiseOrExpressionAndInOperator Alt96_0*
   ;
generic Alt96_0
   =  (UBUB (void:'&' (void:'&' (UBUB (BitwiseOrExpressionAndInOperator ( ))))))
   ;
public generic BitwiseOrExpressionAndInOperator
   = BitwiseXorExpressionAndInOperator Alt97_0*
   ;
generic Alt97_0
   =  (UBUB (void:'|' (!(void:'=') (UBUB (BitwiseXorExpressionAndInOperator ( ))))))
   ;
public generic BitwiseXorExpressionAndInOperator
   = BitwiseAndExpressionAndInOperator Alt98_0*
   ;
generic Alt98_0
   =  (UBUB (void:'^' (!(void:'=') (UBUB (BitwiseAndExpressionAndInOperator ( ))))))
   ;
public generic BitwiseAndExpressionAndInOperator
   = EqualityExpressionAndInOperator Alt99_0*
   ;
generic Alt99_0
   =  (UBUB (void:'&' (!(void:'&') (UBUB (EqualityExpressionAndInOperator ( ))))))
   ;
public generic EqualityExpressionAndInOperator
   = RelationalExpressionAndInOperator Alt100_0*
   ;
generic Alt100_0
   =  (UBUB (addEqualityOperator (UBUB (RelationalExpressionAndInOperator ))))
   ;
public generic RelationalExpressionAndInOperator
   = ShiftExpressionAndInOperator Alt101_0*
   ;
generic Alt101_0
   =  (UBUB (addRelationalOperatorAndInOperator (UBUB (ShiftExpressionAndInOperator ))))
   ;
public generic ShiftExpressionAndInOperator
   = AdditiveExpressionAndInOperator Alt102_0*
   ;
generic Alt102_0
   =  (UBUB (addShiftOperator (UBUB (AdditiveExpressionAndInOperator ))))
   ;
public generic AdditiveExpressionAndInOperator
   = MultiplicativeExpressionAndInOperator Alt103_0*
   ;
generic Alt103_0
   =  (UBUB ((void:'+' (!(void:'+' / void:'=') ) / void:'-' (!(void:'-' / void:'=' / void:'>') )) (UBUB (MultiplicativeExpressionAndInOperator ))))
   ;
public generic MultiplicativeExpressionAndInOperator
   = UnaryExpressionAndInOperator Alt104_0*
   ;
generic Alt104_0
   =  (UBUB ((void:'*' (!(void:'=') ) / void:'/' (!(void:'=') ) / void:'%' (!(void:'=' / void:'>') )) (UBUB (UnaryExpressionAndInOperator ))))
   ;
public generic UnaryExpressionAndInOperator
   = PostfixExpressionAndInOperator
   /  (addUnaryOperator (UBUB (UnaryExpressionAndInOperator )))
   ;
public generic PostfixExpressionAndInOperator
   =  (LeftHandSideExpressionAndInOperator (UB (addPostfixOperator )))
   / LeftHandSideExpressionAndInOperator
   ;
public void UB
   = (SPACE / MULTIUBLINEUBCOMMENTUBSINGLEUBLINE)*
   ;
public generic MULTIUBLINEUBCOMMENTUBSINGLEUBLINE
   = void:'/' (void:'*' (Alt108_0* (void:"*/")))
   ;
generic Alt108_0
   = !(void:"*/" / LINEUBTERMINATOR) _
   ;
public generic addPostfixOperator
   = void:'+' (void:'+' )
   / void:'-' (void:'-' )
   ;
public generic addUnaryOperator
   = void:'+' (void:'+' )
   / void:'-' (void:'-' )
   / void:'+'
   / void:'-'
   / void:'~'
   / void:'!' (!(void:'=') )
   / void:'d' (void:'e' (void:'l' (void:'e' (void:'t' (void:'e' (!W ))))))
   / void:'v' (void:'o' (void:'i' (void:'d' (!W ))))
   / void:'t' (void:'y' (void:'p' (void:'e' (void:'o' (void:'f' (!W ))))))
   ;
public generic addShiftOperator
   = void:'<' (void:'<' (!(void:'=') ))
   / void:'>' (void:'>' (void:'>'  / !(void:'=') ))
   ;
public generic addRelationalOperatorAndInOperator
   = void:'<' (void:'='  / )
   / void:'>' (void:'='  / )
   / void:'i' (void:'n' (void:'s' (void:'t' (void:'a' (void:'n' (void:'c' (void:'e' (void:'o' (void:'f' (!W ))))))))))
   / void:'i' (void:'n' (!W ))
   ;
public generic addEqualityOperator
   = void:'=' (void:'=' (void:'='  / ))
   / void:'!' (void:'=' (void:'='  / ))
   ;
public generic EOS
   = UBUB void:';'
   / UB (SINGLEUBLINEUBCOMMENT? LINEUBTERMINATORUBSEQUENCE)
   / UB &(void:'}')
   / UBUB EOF
   ;
public generic EOF
   = !(_)
   ;
public generic IfStatementAndInOperator
   =  (void:'i' (void:'f' (UBUB (addConditionAndInOperator (UBUB (StatementAndInOperator (Alt116_0? ( ))))))))
   ;
generic Alt116_0
   = UBUB (void:'e' (void:'l' (void:'s' (void:'e' (!W (UBUB StatementAndInOperator))))))
   ;
public generic addConditionAndInOperator
   = void:'(' (UBUB (ExpressionAndInOperator (UBUB void:')')))
   ;
public generic DoWhileStatementAndInOperator
   =  (void:'d' (void:'o' (!W (UBUB (StatementAndInOperator (UBUB (void:'w' (void:'h' (void:'i' (void:'l' (void:'e' (UBUB (addConditionAndInOperator (EOS ( )))))))))))))))
   ;
public generic WhileStatementAndInOperator
   =  (void:'w' (void:'h' (void:'i' (void:'l' (void:'e' (UBUB (addConditionAndInOperator (UBUB (StatementAndInOperator ( ))))))))))
   ;
public generic ForStatementAndInOperator
   =  (void:'f' (void:'o' (void:'r' (UBUB (void:'(' (UBUB (addForStatementPartAndInOperator (UBUB (void:')' (UBUB (StatementAndInOperator )))))))))))
   ;
public generic addForStatementPartAndInOperator
   = void:'v' (void:'a' (void:'r' (!W ( (UBUB (VariableDeclarationListNotInOperator (UBUB (void:';' (UBUB (Alt121_0? (UBUB (void:';' (UBUB Alt121_1?)))))))))))))
   /  (Alt121_2? (UBUB (void:';' (UBUB (Alt121_3? (UBUB (void:';' (UBUB Alt121_4?))))))))
   ;
generic Alt121_0
   = ExpressionAndInOperator
   ;
generic Alt121_1
   = ExpressionAndInOperator
   ;
generic Alt121_2
   = ExpressionNotInOperator
   ;
generic Alt121_3
   = ExpressionAndInOperator
   ;
generic Alt121_4
   = ExpressionAndInOperator
   ;
public generic VariableDeclarationListNotInOperator
   =  (VariableDeclarationNotInOperator (Alt122_0* ( )))
   ;
generic Alt122_0
   = UBUB (void:',' (UBUB VariableDeclarationNotInOperator))
   ;
public generic VariableDeclarationNotInOperator
   =  (Identifier (Alt123_0? ( )))
   ;
generic Alt123_0
   = UBUB addInitialiserNotInOperator
   ;
public generic addInitialiserNotInOperator
   = void:'=' (UBUB AssignmentExpressionNotInOperator)
   ;
public generic AssignmentExpressionNotInOperator
   =  (LeftHandSideExpressionAndInOperator (UBUB (addAssignmentOperator (UBUB (AssignmentExpressionNotInOperator )))))
   / ConditionalExpressionNotInOperator
   ;
public generic ConditionalExpressionNotInOperator
   = LogicalOrExpressionNotInOperator Alt126_0*
   ;
generic Alt126_0
   =  (UBUB (void:'?' (UBUB (AssignmentExpressionAndInOperator (UBUB (void:':' (UBUB (AssignmentExpressionNotInOperator ( )))))))))
   ;
public generic LogicalOrExpressionNotInOperator
   = LogicalAndExpressionNotInOperator Alt127_0*
   ;
generic Alt127_0
   =  (UBUB (void:'|' (void:'|' (UBUB (LogicalAndExpressionNotInOperator ( ))))))
   ;
public generic LogicalAndExpressionNotInOperator
   = BitwiseOrExpressionNotInOperator Alt128_0*
   ;
generic Alt128_0
   =  (UBUB (void:'&' (void:'&' (UBUB (BitwiseOrExpressionNotInOperator ( ))))))
   ;
public generic BitwiseOrExpressionNotInOperator
   = BitwiseXorExpressionNotInOperator Alt129_0*
   ;
generic Alt129_0
   =  (UBUB (void:'|' (!(void:'=') (UBUB (BitwiseXorExpressionNotInOperator ( ))))))
   ;
public generic BitwiseXorExpressionNotInOperator
   = BitwiseAndExpressionNotInOperator Alt130_0*
   ;
generic Alt130_0
   =  (UBUB (void:'^' (!(void:'=') (UBUB (BitwiseAndExpressionNotInOperator ( ))))))
   ;
public generic BitwiseAndExpressionNotInOperator
   = EqualityExpressionNotInOperator Alt131_0*
   ;
generic Alt131_0
   =  (UBUB (void:'&' (!(void:'&') (UBUB (EqualityExpressionNotInOperator ( ))))))
   ;
public generic EqualityExpressionNotInOperator
   = RelationalExpressionNotInOperator Alt132_0*
   ;
generic Alt132_0
   =  (UBUB (addEqualityOperator (UBUB (RelationalExpressionNotInOperator ))))
   ;
public generic RelationalExpressionNotInOperator
   = ShiftExpressionNotInOperator Alt133_0*
   ;
generic Alt133_0
   =  (UBUB (addRelationalOperatorNotInOperator (UBUB (ShiftExpressionNotInOperator ))))
   ;
public generic ShiftExpressionNotInOperator
   = AdditiveExpressionAndInOperator Alt134_0*
   ;
generic Alt134_0
   =  (UBUB (addShiftOperator (UBUB (AdditiveExpressionAndInOperator ))))
   ;
public generic addRelationalOperatorNotInOperator
   = void:'<' (void:'='  / )
   / void:'>' (void:'='  / )
   / void:'i' (void:'n' (void:'s' (void:'t' (void:'a' (void:'n' (void:'c' (void:'e' (void:'o' (void:'f' (!W ))))))))))
   ;
public generic ExpressionNotInOperator
   = AssignmentExpressionNotInOperator Alt136_0*
   ;
generic Alt136_0
   =  (UBUB (void:',' (UBUB (AssignmentExpressionNotInOperator ( )))))
   ;
public generic ForEachStatementAndInOperator
   =  (void:'f' (void:'o' (void:'r' (UBUB (void:'(' (UBUB (addForEachPartAndInOperator (UBUB (void:')' (UBUB (StatementAndInOperator ( ))))))))))))
   ;
public generic addForEachPartAndInOperator
   =  (void:'v' (void:'a' (void:'r' (!W (UBUB (VariableDeclarationListNotInOperator (UBUB (void:'i' (void:'n' (!W (UBUB ExpressionAndInOperator)))))))))))
   /  (LeftHandSideExpressionAndInOperator (UBUB (void:'i' (void:'n' (!W (UBUB ExpressionAndInOperator))))))
   ;
public generic ContinueStatement
   =  (void:'c' (void:'o' (void:'n' (void:'t' (void:'i' (void:'n' (void:'u' (void:'e' (!W (Alt139_0? (EOS ( ))))))))))))
   ;
generic Alt139_0
   = UB Identifier
   ;
public generic BreakStatement
   =  (void:'b' (void:'r' (void:'e' (void:'a' (void:'k' (!W (Alt140_0? (EOS ( )))))))))
   ;
generic Alt140_0
   = UB Identifier
   ;
public generic ReturnStatementAndInOperator
   =  (void:'r' (void:'e' (void:'t' (void:'u' (void:'r' (void:'n' (!W (Alt141_0? (EOS ( ))))))))))
   ;
generic Alt141_0
   = UB ExpressionAndInOperator
   ;
public generic WithStatementAndInOperator
   =  (void:'w' (void:'i' (void:'t' (void:'h' (UBUB (addConditionAndInOperator (UBUB (StatementAndInOperator ( )))))))))
   ;
public generic LabelledStatementAndInOperator
   =  (Identifier (UBUB (void:':' (UBUB (StatementAndInOperator ( ))))))
   ;
public generic SwitchStatementAndInOperator
   =  (void:'s' (void:'w' (void:'i' (void:'t' (void:'c' (void:'h' (UBUB (addConditionAndInOperator (UBUB (CaseBlockAndInOperator ( )))))))))))
   ;
public generic CaseBlockAndInOperator
   =  (void:'{' (UBUB (addCaseClausesAndInOperator? (UBUB (void:'}' ( ))))))
   ;
public generic addCaseClausesAndInOperator
   = CaseClauseAndInOperator Alt146_0*
   ;
generic Alt146_0
   = UBUB CaseClauseAndInOperator
   ;
public generic CaseClauseAndInOperator
   =  (void:'c' (void:'a' (void:'s' (void:'e' (!W (UBUB (ExpressionAndInOperator (UBUB (void:':' (UBUB (Alt147_0* ( ))))))))))))
   /  (void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' (UBUB (void:':' (UBUB (Alt147_1* ( ))))))))))))
   ;
generic Alt147_0
   = StatementAndInOperator UBUB
   ;
generic Alt147_1
   = StatementAndInOperator UBUB
   ;
public generic ThrowStatementAndInOperator
   =  (void:'t' (void:'h' (void:'r' (void:'o' (void:'w' (!W (UB (ExpressionAndInOperator (EOS ( ))))))))))
   ;
public generic TryStatementAndInOperator
   =  (void:'t' (void:'r' (void:'y' (!W (UBUB (BlockAndInOperator (UBUB ((CatchAndInOperator Alt149_0? / addFinallyAndInOperator) ( )))))))))
   ;
generic Alt149_0
   = UBUB addFinallyAndInOperator
   ;
public generic CatchAndInOperator
   =  ( (void:'c' (void:'a' (void:'t' (void:'c' (void:'h' (UBUB (void:'(' (UBUB (Identifier (UBUB (void:')' (UBUB (BlockAndInOperator ( )))))))))))))) ( ))
   ;
public generic addFinallyAndInOperator
   = void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (void:'l' (void:'y' (!W (UBUB BlockAndInOperator))))))))
   ;
public generic DebuggerStatement
   = void:'d' (void:'e' (void:'b' (void:'u' (void:'g' (void:'g' (void:'e' (void:'r' (!W (EOS ( ( )))))))))))
   ;
public generic FunctionDeclarationAndInOperator
   =  (void:'f' (void:'u' (void:'n' (void:'c' (void:'t' (void:'i' (void:'o' (void:'n' (!W (UBUB (Identifier (UBUB (FunctionParameterList (UBUB (FunctionBodyAndInOperator ( ))))))))))))))))
   ;
public generic ExpressionStatementAndInOperator
   = !(void:'{') (ExpressionAndInOperator EOS)
   ;
