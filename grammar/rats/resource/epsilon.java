package resource;
// ===========================================================================
// This file has been generated by
// Rats! Parser Generator, version 2.4.0,
// (C) 2004-2014 Robert Grimm,
// on 2017年1月19日 at 16:01:57.
// Edit at your own risk.
// ===========================================================================

import java.io.Reader;
import java.io.IOException;
import bench.Main.PEGParser;

import xtc.util.Pair;

import xtc.tree.Node;
import xtc.tree.GNode;

import xtc.parser.ParserBase;
import xtc.parser.Column;
import xtc.parser.Result;
import xtc.parser.SemanticValue;
import xtc.parser.ParseError;

/**
 * Packrat parser for grammar <code>epsilon</code>.
 *
 * <p />This class has been generated by the <i>Rats!</i> parser
 * generator, version 2.4.0, (C) 2004-2014 Robert Grimm.
 */
public final class epsilon extends ParserBase implements PEGParser {

  // =========================================================================

  /** Chunk 1 of memoized results. */
  static final class Chunk1 {
    Result fDeclaration;
    Result fFunctionParamList;
    Result fFunctionParam;
    Result fInitDecl;
    Result fBlock;
    Result fBlock$$Star1;
    Result fStatement;
    Result fElse;
    Result fExpression;
    Result fExpression$$Star1;
  }

  /** Chunk 2 of memoized results. */
  static final class Chunk2 {
    Result fAssignmentExpression;
    Result fLogicalOrExpression;
    Result fLogicalOrExpression$$Star1;
    Result fLogicalAndExpression;
    Result fLogicalAndExpression$$Star1;
    Result fEqualityExpression;
    Result fEqualityExpression$$Star1;
    Result fRelationalExpression;
    Result fRelationalExpression$$Star1;
    Result fUnaryExpression;
  }

  /** Chunk 3 of memoized results. */
  static final class Chunk3 {
    Result fPrimaryExpression;
    Result fL;
    Result fL$$Star1;
    Result fIdentifier;
    Result fDIGIT;
    Result fW;
  }

  // =========================================================================

  /** Memoization table column. */
  static final class epsilonColumn extends Column {
    Chunk1 chunk1;
    Chunk2 chunk2;
    Chunk3 chunk3;
  }

  // =========================================================================

  /**
   * Create a new packrat parser.
   *
   * @param reader The reader.
   * @param file The file name.
   */
  public epsilon(final Reader reader, final String file) {
    super(reader, file);
  }

  /**
   * Create a new packrat parser.
   *
   * @param reader The file reader.
   * @param file The file name.
   * @param size The file size.
   */
  public epsilon(final Reader reader, final String file, final int size) {
    super(reader, file, size);
  }

  // =========================================================================

  protected Column newColumn() {
    return new epsilonColumn();
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.File.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  public Result pFile(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pL(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pTopLevel(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pL(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$3 = yyResult.semanticValue();

          yyResult = pEOT(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$4 = yyResult.semanticValue();

            yyValue = GNode.create("File", v$g$1, v$g$2, v$g$3, v$g$4);

            return yyResult.createValue(yyValue, yyError);
          }
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Declaration.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDeclaration(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fDeclaration) 
      yyColumn.chunk1.fDeclaration = pDeclaration$1(yyStart);
    return yyColumn.chunk1.fDeclaration;
  }

  /** Actually parse epsilon.Declaration. */
  private Result pDeclaration$1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pFunctionDeclaration(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("Declaration", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pVariableDeclaration(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$2 = yyResult.semanticValue();

      yyValue = GNode.create("Declaration", v$g$2);

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionDeclaration.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionDeclaration(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('f' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('u' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('n' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('c' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('t' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('i' == yyC) {
                yyIndex = yyIndex + 1;

                yyC = character(yyIndex);
                if ('o' == yyC) {
                  yyIndex = yyIndex + 1;

                  yyC = character(yyIndex);
                  if ('n' == yyC) {
                    yyIndex = yyIndex + 1;
                    String v$g$1 = "function";

                    yyResult = pL(yyIndex);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$2 = yyResult.semanticValue();

                      yyResult = pIdentifier(yyResult.index);
                      yyError  = yyResult.select(yyError);
                      if (yyResult.hasValue()) {
                        Node v$g$3 = yyResult.semanticValue();

                        yyResult = pL(yyResult.index);
                        yyError  = yyResult.select(yyError);
                        if (yyResult.hasValue()) {
                          Node v$g$4 = yyResult.semanticValue();

                          yyBase = yyResult.index;
                          yyC    = character(yyBase);
                          if ('(' == yyC) {
                            yyIndex = yyResult.index + 1;
                            String v$g$5 = "(";

                            yyResult = pFunctionParamList(yyIndex);
                            yyError  = yyResult.select(yyError);
                            if (yyResult.hasValue()) {
                              Node v$g$6 = yyResult.semanticValue();

                              yyBase = yyResult.index;
                              yyC    = character(yyBase);
                              if (')' == yyC) {
                                yyIndex = yyResult.index + 1;
                                String v$g$7 = ")";

                                final int yyChoice1 = yyIndex;

                                // Nested alternative 1.

                                yyResult = pL(yyChoice1);
                                yyError  = yyResult.select(yyError);
                                if (yyResult.hasValue()) {
                                  Node v$g$8 = yyResult.semanticValue();

                                  final int yyChoice2 = yyResult.index;

                                  // Nested alternative 1.

                                  yyResult = pBlock(yyChoice2);
                                  yyError  = yyResult.select(yyError);
                                  if (yyResult.hasValue()) {
                                    Node v$g$9 = yyResult.semanticValue();

                                    yyResult = pL(yyResult.index);
                                    yyError  = yyResult.select(yyError);
                                    if (yyResult.hasValue()) {
                                      Node v$g$10 = yyResult.semanticValue();

                                      yyValue = GNode.create("FunctionDeclaration", 10).
                                        add(v$g$1).add(v$g$2).add(v$g$3).add(v$g$4).add(v$g$5).add(v$g$6).add(v$g$7).add(v$g$8).add(v$g$9).add(v$g$10);

                                      return yyResult.createValue(yyValue, yyError);
                                    }
                                  }

                                  // Nested alternative 2.

                                  yyBase = yyChoice2;
                                  yyC    = character(yyBase);
                                  if (';' == yyC) {
                                    yyIndex = yyChoice2 + 1;
                                    String v$g$11 = ";";

                                    yyValue = GNode.create("FunctionDeclaration", 9).
                                      add(v$g$1).add(v$g$2).add(v$g$3).add(v$g$4).add(v$g$5).add(v$g$6).add(v$g$7).add(v$g$8).add(v$g$11);

                                    return new SemanticValue(yyValue, yyIndex, yyError);
                                  } else {
                                    yyError = yyError.select("';' expected", yyBase);
                                  }
                                }
                              } else {
                                yyError = yyError.select("')' expected", yyBase);
                              }
                            }
                          } else {
                            yyError = yyError.select("'(' expected", yyBase);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("function declaration expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionParamList.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionParamList(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fFunctionParamList) 
      yyColumn.chunk1.fFunctionParamList = pFunctionParamList$1(yyStart);
    return yyColumn.chunk1.fFunctionParamList;
  }

  /** Actually parse epsilon.FunctionParamList. */
  private Result pFunctionParamList$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyOption1;
    Node       yyOpValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyOption1  = yyStart;
    yyOpValue1 = null;

    yyResult = pFunctionParamListOption(yyOption1);
    yyError  = yyResult.select(yyError, yyOption1);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyOption1  = yyResult.index;
      yyOpValue1 = v$el$1;
    }
    { // Start scope for v$g$1.
      Node v$g$1 = yyOpValue1;

      yyValue = GNode.create("FunctionParamList", v$g$1);

      return new SemanticValue(yyValue, yyOption1, yyError);
    } // End scope for v$g$1.
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionParamListOption.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionParamListOption(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyRepetition1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pFunctionParam(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.empty();
        while (true) {

          yyResult = pFunctionParamRepeat(yyRepetition1);
          yyError  = yyResult.select(yyError, yyRepetition1);
          if (yyResult.hasValue()) {
            Node v$el$1 = yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v$g$3.
          Pair<Node> v$g$3 = yyRepValue1.reverse();

          yyValue = GNode.create("FunctionParamListOption", v$g$1, v$g$2, v$g$3);

          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$3.
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionParamRepeat.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionParamRepeat(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (',' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pFunctionParam(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("FunctionParamRepeat", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("function param repeat expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionParam.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionParam(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fFunctionParam) 
      yyColumn.chunk1.fFunctionParam = pFunctionParam$1(yyStart);
    return yyColumn.chunk1.fFunctionParam;
  }

  /** Actually parse epsilon.FunctionParam. */
  private Result pFunctionParam$1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyValue = GNode.create("FunctionParam", v$g$1, v$g$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.VariableDeclaration.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pVariableDeclaration(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('v' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('a' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('r' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$1 = "var";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$2 = yyResult.semanticValue();

            yyResult = pVariableList(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$3 = yyResult.semanticValue();

              yyBase = yyResult.index;
              yyC    = character(yyBase);
              if (';' == yyC) {
                yyIndex = yyResult.index + 1;
                String v$g$4 = ";";

                yyResult = pL(yyIndex);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  Node v$g$5 = yyResult.semanticValue();

                  yyValue = GNode.create("VariableDeclaration", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5);

                  return yyResult.createValue(yyValue, yyError);
                }
              } else {
                yyError = yyError.select("';' expected", yyBase);
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("variable declaration expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.VariableList.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pVariableList(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pInitDecl(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepValue1   = Pair.empty();
      while (true) {

        yyResult = pVariableListRepeat(yyRepetition1);
        yyError  = yyResult.select(yyError, yyRepetition1);
        if (yyResult.hasValue()) {
          Node v$el$1 = yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$g$2.
        Pair<Node> v$g$2 = yyRepValue1.reverse();

        yyValue = GNode.create("VariableList", v$g$1, v$g$2);

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      } // End scope for v$g$2.
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.VariableListRepeat.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pVariableListRepeat(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (',' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pInitDecl(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("VariableListRepeat", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("variable list repeat expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.InitDecl.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pInitDecl(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fInitDecl) 
      yyColumn.chunk1.fInitDecl = pInitDecl$1(yyStart);
    return yyColumn.chunk1.fInitDecl;
  }

  /** Actually parse epsilon.InitDecl. */
  private Result pInitDecl$1(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyOption1;
    Node       yyOpValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = null;

        yyResult = pEqual(yyOption1);
        yyError  = yyResult.select(yyError, yyOption1);
        if (yyResult.hasValue()) {
          Node v$el$1 = yyResult.semanticValue();

          yyOption1  = yyResult.index;
          yyOpValue1 = v$el$1;
        }
        { // Start scope for v$g$3.
          Node v$g$3 = yyOpValue1;

          yyResult = pL(yyOption1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$4 = yyResult.semanticValue();

            yyValue = GNode.create("InitDecl", v$g$1, v$g$2, v$g$3, v$g$4);

            return yyResult.createValue(yyValue, yyError);
          }
        } // End scope for v$g$3.
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Equal.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqual(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('=' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pInitializer(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("Equal", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("equal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Initializer.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pInitializer(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pAssignmentExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("Initializer", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Block.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBlock(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fBlock) 
      yyColumn.chunk1.fBlock = pBlock$1(yyStart);
    return yyColumn.chunk1.fBlock;
  }

  /** Actually parse epsilon.Block. */
  private Result pBlock$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('{' == yyC) {
      yyIndex = yyStart + 1;
      String v$g$1 = "{";

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pBlock$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Pair<Node> v$g$3 = yyResult.semanticValue();

          yyBase = yyResult.index;
          yyC    = character(yyBase);
          if ('}' == yyC) {
            yyIndex = yyResult.index + 1;
            String v$g$4 = "}";

            yyResult = pL(yyIndex);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$5 = yyResult.semanticValue();

              yyValue = GNode.create("Block", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5);

              return yyResult.createValue(yyValue, yyError);
            }
          } else {
            yyError = yyError.select("'}' expected", yyBase);
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("block expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.Block$$Choice1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBlock$$Choice1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStatement(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pDeclaration(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.Block$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBlock$$Star1(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fBlock$$Star1) 
      yyColumn.chunk1.fBlock$$Star1 = pBlock$$Star1$1(yyStart);
    return yyColumn.chunk1.fBlock$$Star1;
  }

  /** Actually parse epsilon.Block$$Star1. */
  private Result pBlock$$Star1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pBlock$$Choice1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pBlock$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$4 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$4);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Statement.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStatement(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fStatement) 
      yyColumn.chunk1.fStatement = pStatement$1(yyStart);
    return yyColumn.chunk1.fStatement;
  }

  /** Actually parse epsilon.Statement. */
  private Result pStatement$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    Node       yyOpValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pBlock(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("Statement", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;
        String v$g$2 = "if";

        yyResult = pL(yyIndex);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$3 = yyResult.semanticValue();

          yyBase = yyResult.index;
          yyC    = character(yyBase);
          if ('(' == yyC) {
            yyIndex = yyResult.index + 1;
            String v$g$4 = "(";

            yyResult = pExpression(yyIndex);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$5 = yyResult.semanticValue();

              yyBase = yyResult.index;
              yyC    = character(yyBase);
              if (')' == yyC) {
                yyIndex = yyResult.index + 1;
                String v$g$6 = ")";

                yyResult = pL(yyIndex);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  Node v$g$7 = yyResult.semanticValue();

                  yyResult = pBlock(yyResult.index);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$8 = yyResult.semanticValue();

                    yyOption1  = yyResult.index;
                    yyOpValue1 = null;

                    yyResult = pElse(yyOption1);
                    yyError  = yyResult.select(yyError, yyOption1);
                    if (yyResult.hasValue()) {
                      Node v$el$1 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = v$el$1;
                    }
                    { // Start scope for v$g$9.
                      Node v$g$9 = yyOpValue1;

                      yyValue = GNode.create("Statement", v$g$2, v$g$3, v$g$4, v$g$5, v$g$6, v$g$7, v$g$8, v$g$9);

                      return new SemanticValue(yyValue, yyOption1, yyError);
                    } // End scope for v$g$9.
                  }
                }
              } else {
                yyError = yyError.select("')' expected", yyBase);
              }
            }
          } else {
            yyError = yyError.select("'(' expected", yyBase);
          }
        }
      }
    }

    // Alternative 3.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('1' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$10 = "if1";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$11 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$12 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$13 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$14 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$15 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$16 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$2 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$2;
                      }
                      { // Start scope for v$g$17.
                        Node v$g$17 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$10, v$g$11, v$g$12, v$g$13, v$g$14, v$g$15, v$g$16, v$g$17);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$17.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 4.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('2' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$18 = "if2";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$19 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$20 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$21 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$22 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$23 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$24 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$3 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$3;
                      }
                      { // Start scope for v$g$25.
                        Node v$g$25 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$18, v$g$19, v$g$20, v$g$21, v$g$22, v$g$23, v$g$24, v$g$25);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$25.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 5.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('3' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$26 = "if3";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$27 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$28 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$29 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$30 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$31 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$32 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$4 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$4;
                      }
                      { // Start scope for v$g$33.
                        Node v$g$33 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$26, v$g$27, v$g$28, v$g$29, v$g$30, v$g$31, v$g$32, v$g$33);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$33.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 6.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('4' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$34 = "if4";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$35 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$36 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$37 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$38 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$39 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$40 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$5 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$5;
                      }
                      { // Start scope for v$g$41.
                        Node v$g$41 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$34, v$g$35, v$g$36, v$g$37, v$g$38, v$g$39, v$g$40, v$g$41);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$41.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 7.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('5' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$42 = "if5";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$43 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$44 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$45 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$46 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$47 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$48 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$6 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$6;
                      }
                      { // Start scope for v$g$49.
                        Node v$g$49 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$42, v$g$43, v$g$44, v$g$45, v$g$46, v$g$47, v$g$48, v$g$49);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$49.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 8.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('6' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$50 = "if6";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$51 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$52 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$53 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$54 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$55 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$56 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$7 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$7;
                      }
                      { // Start scope for v$g$57.
                        Node v$g$57 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$50, v$g$51, v$g$52, v$g$53, v$g$54, v$g$55, v$g$56, v$g$57);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$57.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 9.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('7' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$58 = "if7";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$59 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$60 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$61 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$62 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$63 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$64 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$8 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$8;
                      }
                      { // Start scope for v$g$65.
                        Node v$g$65 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$58, v$g$59, v$g$60, v$g$61, v$g$62, v$g$63, v$g$64, v$g$65);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$65.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 10.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('8' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$66 = "if8";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$67 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$68 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$69 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$70 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$71 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$72 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$9 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$9;
                      }
                      { // Start scope for v$g$73.
                        Node v$g$73 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$66, v$g$67, v$g$68, v$g$69, v$g$70, v$g$71, v$g$72, v$g$73);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$73.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 11.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('9' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$74 = "if9";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$75 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$76 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$77 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$78 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$79 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$80 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$10 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$10;
                      }
                      { // Start scope for v$g$81.
                        Node v$g$81 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$74, v$g$75, v$g$76, v$g$77, v$g$78, v$g$79, v$g$80, v$g$81);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$81.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 12.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('A' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$82 = "ifA";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$83 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$84 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$85 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$86 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$87 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$88 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$11 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$11;
                      }
                      { // Start scope for v$g$89.
                        Node v$g$89 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$82, v$g$83, v$g$84, v$g$85, v$g$86, v$g$87, v$g$88, v$g$89);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$89.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 13.

    yyC = character(yyStart);
    if ('i' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('f' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('B' == yyC) {
          yyIndex = yyIndex + 1;
          String v$g$90 = "ifB";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$91 = yyResult.semanticValue();

            yyBase = yyResult.index;
            yyC    = character(yyBase);
            if ('(' == yyC) {
              yyIndex = yyResult.index + 1;
              String v$g$92 = "(";

              yyResult = pExpression(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$93 = yyResult.semanticValue();

                yyBase = yyResult.index;
                yyC    = character(yyBase);
                if (')' == yyC) {
                  yyIndex = yyResult.index + 1;
                  String v$g$94 = ")";

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {
                    Node v$g$95 = yyResult.semanticValue();

                    yyResult = pBlock(yyResult.index);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$96 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pElse(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$12 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$12;
                      }
                      { // Start scope for v$g$97.
                        Node v$g$97 = yyOpValue1;

                        yyValue = GNode.create("Statement", v$g$90, v$g$91, v$g$92, v$g$93, v$g$94, v$g$95, v$g$96, v$g$97);

                        return new SemanticValue(yyValue, yyOption1, yyError);
                      } // End scope for v$g$97.
                    }
                  }
                } else {
                  yyError = yyError.select("')' expected", yyBase);
                }
              }
            } else {
              yyError = yyError.select("'(' expected", yyBase);
            }
          }
        }
      }
    }

    // Alternative 14.

    yyC = character(yyStart);
    if ('r' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('e' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('t' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('u' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('r' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('n' == yyC) {
                yyIndex = yyIndex + 1;
                String v$g$98 = "return";

                yyResult = pL(yyIndex);
                yyError  = yyResult.select(yyError);
                if (yyResult.hasValue()) {
                  Node v$g$99 = yyResult.semanticValue();

                  yyOption1  = yyResult.index;
                  yyOpValue1 = null;

                  yyResult = pExpression(yyOption1);
                  yyError  = yyResult.select(yyError, yyOption1);
                  if (yyResult.hasValue()) {
                    Node v$el$13 = yyResult.semanticValue();

                    yyOption1  = yyResult.index;
                    yyOpValue1 = v$el$13;
                  }
                  { // Start scope for v$g$100.
                    Node v$g$100 = yyOpValue1;

                    yyBase = yyOption1;
                    yyC    = character(yyBase);
                    if (';' == yyC) {
                      yyIndex = yyOption1 + 1;
                      String v$g$101 = ";";

                      yyResult = pL(yyIndex);
                      yyError  = yyResult.select(yyError);
                      if (yyResult.hasValue()) {
                        Node v$g$102 = yyResult.semanticValue();

                        yyValue = GNode.create("Statement", v$g$98, v$g$99, v$g$100, v$g$101, v$g$102);

                        return yyResult.createValue(yyValue, yyError);
                      }
                    } else {
                      yyError = yyError.select("';' expected", yyBase);
                    }
                  } // End scope for v$g$100.
                }
              }
            }
          }
        }
      }
    }

    // Alternative 15.

    yyResult = pExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$103 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$104 = yyResult.semanticValue();

        yyBase = yyResult.index;
        yyC    = character(yyBase);
        if (';' == yyC) {
          yyIndex = yyResult.index + 1;
          String v$g$105 = ";";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$106 = yyResult.semanticValue();

            yyValue = GNode.create("Statement", v$g$103, v$g$104, v$g$105, v$g$106);

            return yyResult.createValue(yyValue, yyError);
          }
        } else {
          yyError = yyError.select("';' expected", yyBase);
        }
      }
    }

    // Alternative 16.

    yyC = character(yyStart);
    if (';' == yyC) {
      yyIndex = yyStart + 1;
      String v$g$107 = ";";

      yyValue = GNode.create("Statement", v$g$107);

      return new SemanticValue(yyValue, yyIndex, yyError);
    }

    // Done.
    yyError = yyError.select("statement expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Else.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pElse(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fElse) 
      yyColumn.chunk1.fElse = pElse$1(yyStart);
    return yyColumn.chunk1.fElse;
  }

  /** Actually parse epsilon.Else. */
  private Result pElse$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('e' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('l' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('s' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('e' == yyC) {
            yyIndex = yyIndex + 1;
            String v$g$1 = "else";

            yyResult = pL(yyIndex);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$2 = yyResult.semanticValue();

              yyResult = pBlock(yyResult.index);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$3 = yyResult.semanticValue();

                yyValue = GNode.create("Else", v$g$1, v$g$2, v$g$3);

                return yyResult.createValue(yyValue, yyError);
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("else expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Expression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fExpression) 
      yyColumn.chunk1.fExpression = pExpression$1(yyStart);
    return yyColumn.chunk1.fExpression;
  }

  /** Actually parse epsilon.Expression. */
  private Result pExpression$1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pAssignmentExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pExpression$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Pair<Node> v$g$3 = yyResult.semanticValue();

          yyValue = GNode.create("Expression", v$g$1, v$g$2, v$g$3);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.Expression$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpression$$Star1(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk1) yyColumn.chunk1 = new Chunk1();
    if (null == yyColumn.chunk1.fExpression$$Star1) 
      yyColumn.chunk1.fExpression$$Star1 = pExpression$$Star1$1(yyStart);
    return yyColumn.chunk1.fExpression$$Star1;
  }

  /** Actually parse epsilon.Expression$$Star1. */
  private Result pExpression$$Star1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pComma(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pExpression$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$2 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Comma.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pComma(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (',' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pAssignmentExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("Comma", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("comma expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.AssignmentExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAssignmentExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fAssignmentExpression) 
      yyColumn.chunk2.fAssignmentExpression = pAssignmentExpression$1(yyStart);
    return yyColumn.chunk2.fAssignmentExpression;
  }

  /** Actually parse epsilon.AssignmentExpression. */
  private Result pAssignmentExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pUnaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pAssignmentOperator(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          String v$g$3 = yyResult.semanticValue();

          yyResult = pL(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$4 = yyResult.semanticValue();

            yyResult = pAssignmentExpression(yyResult.index);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$5 = yyResult.semanticValue();

              yyValue = GNode.create("AssignmentExpression", v$g$1, v$g$2, v$g$3, v$g$4, v$g$5);

              return yyResult.createValue(yyValue, yyError);
            }
          }
        }
      }
    }

    // Alternative 2.

    yyResult = pConditionalExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$6 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$7 = yyResult.semanticValue();

        yyValue = GNode.create("AssignmentExpression", v$g$6, v$g$7);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.AssignmentOperator.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAssignmentOperator(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '=':
        {
          yyValue = "=";

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      case '*':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "*=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '/':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "/=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '%':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "%=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '+':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "+=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '-':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "-=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '<':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('<' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('=' == yyC) {

                  yyValue = "<<=";

                  return new SemanticValue(yyValue, yyIndex, yyError);
                }
              }
            }
          }
        }
        break;

      case '>':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('>' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;

                switch (yyC) {
                case '=':
                  {
                    yyValue = ">>=";

                    return new SemanticValue(yyValue, yyIndex, yyError);
                  }

                case '>':
                  {
                    yyC = character(yyIndex);
                    if (-1 != yyC) {
                      yyIndex = yyIndex + 1;
                      if ('=' == yyC) {

                        yyValue = ">>>=";

                        return new SemanticValue(yyValue, yyIndex, yyError);
                      }
                    }
                  }
                  break;

                default:
                  /* No match. */
                }
              }
            }
          }
        }
        break;

      case '&':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "&=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '^':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "^=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      case '|':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('=' == yyC) {

              yyValue = "|=";

              return new SemanticValue(yyValue, yyIndex, yyError);
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("assignment operator expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.ConditionalExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pConditionalExpression(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyRepetition1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLogicalOrExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.empty();
        while (true) {

          yyResult = pExpressionRepeat(yyRepetition1);
          yyError  = yyResult.select(yyError, yyRepetition1);
          if (yyResult.hasValue()) {
            Node v$el$1 = yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v$g$3.
          Pair<Node> v$g$3 = yyRepValue1.reverse();

          yyValue = GNode.create("ConditionalExpression", v$g$1, v$g$2, v$g$3);

          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$3.
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.ExpressionRepeat.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pExpressionRepeat(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('?' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pExpression(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyBase = yyResult.index;
        yyC    = character(yyBase);
        if (':' == yyC) {
          yyIndex = yyResult.index + 1;

          yyResult = pLogicalOrExpression(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$2 = yyResult.semanticValue();

            yyValue = GNode.create("ExpressionRepeat", v$g$1, v$g$2);

            return yyResult.createValue(yyValue, yyError);
          }
        } else {
          yyError = yyError.select("':' expected", yyBase);
        }
      }
    }

    // Done.
    yyError = yyError.select("expression repeat expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.LogicalOrExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalOrExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fLogicalOrExpression) 
      yyColumn.chunk2.fLogicalOrExpression = pLogicalOrExpression$1(yyStart);
    return yyColumn.chunk2.fLogicalOrExpression;
  }

  /** Actually parse epsilon.LogicalOrExpression. */
  private Result pLogicalOrExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLogicalAndExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pLogicalOrExpression$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Pair<Node> v$g$3 = yyResult.semanticValue();

          yyValue = GNode.create("LogicalOrExpression", v$g$1, v$g$2, v$g$3);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.LogicalOrExpression$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalOrExpression$$Star1(final int yyStart) 
    throws IOException {

    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fLogicalOrExpression$$Star1) 
      yyColumn.chunk2.fLogicalOrExpression$$Star1 = pLogicalOrExpression$$Star1$1(yyStart);
    return yyColumn.chunk2.fLogicalOrExpression$$Star1;
  }

  /** Actually parse epsilon.LogicalOrExpression$$Star1. */
  private Result pLogicalOrExpression$$Star1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pOr(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pLogicalOrExpression$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$2 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Or.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pOr(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('|' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('|' == yyC) {
        yyIndex = yyIndex + 1;

        yyResult = pL(yyIndex);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$1 = yyResult.semanticValue();

          yyResult = pLogicalAndExpression(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$2 = yyResult.semanticValue();

            yyValue = GNode.create("Or", v$g$1, v$g$2);

            return yyResult.createValue(yyValue, yyError);
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("or expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.LogicalAndExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalAndExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fLogicalAndExpression) 
      yyColumn.chunk2.fLogicalAndExpression = pLogicalAndExpression$1(yyStart);
    return yyColumn.chunk2.fLogicalAndExpression;
  }

  /** Actually parse epsilon.LogicalAndExpression. */
  private Result pLogicalAndExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pEqualityExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pLogicalAndExpression$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Pair<Node> v$g$3 = yyResult.semanticValue();

          yyValue = GNode.create("LogicalAndExpression", v$g$1, v$g$2, v$g$3);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.LogicalAndExpression$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLogicalAndExpression$$Star1(final int yyStart) 
    throws IOException {

    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fLogicalAndExpression$$Star1) 
      yyColumn.chunk2.fLogicalAndExpression$$Star1 = pLogicalAndExpression$$Star1$1(yyStart);
    return yyColumn.chunk2.fLogicalAndExpression$$Star1;
  }

  /** Actually parse epsilon.LogicalAndExpression$$Star1. */
  private Result pLogicalAndExpression$$Star1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pAnd(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pLogicalAndExpression$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$2 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.And.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAnd(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('&' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('&' == yyC) {
        yyIndex = yyIndex + 1;

        yyResult = pL(yyIndex);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$1 = yyResult.semanticValue();

          yyResult = pEqualityExpression(yyResult.index);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$2 = yyResult.semanticValue();

            yyValue = GNode.create("And", v$g$1, v$g$2);

            return yyResult.createValue(yyValue, yyError);
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("and expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.EqualityExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualityExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fEqualityExpression) 
      yyColumn.chunk2.fEqualityExpression = pEqualityExpression$1(yyStart);
    return yyColumn.chunk2.fEqualityExpression;
  }

  /** Actually parse epsilon.EqualityExpression. */
  private Result pEqualityExpression$1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pRelationalExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pEqualityExpression$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Pair<Node> v$g$3 = yyResult.semanticValue();

          yyValue = GNode.create("EqualityExpression", v$g$1, v$g$2, v$g$3);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.EqualityExpression$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualityExpression$$Star1(final int yyStart) 
    throws IOException {

    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fEqualityExpression$$Star1) 
      yyColumn.chunk2.fEqualityExpression$$Star1 = pEqualityExpression$$Star1$1(yyStart);
    return yyColumn.chunk2.fEqualityExpression$$Star1;
  }

  /** Actually parse epsilon.EqualityExpression$$Star1. */
  private Result pEqualityExpression$$Star1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pEqualOrNotEqual(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pEqualityExpression$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$2 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.EqualOrNotEqual.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualOrNotEqual(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pEqualOrNotEqual$$Choice1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pRelationalExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("EqualOrNotEqual", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.EqualOrNotEqual$$Choice1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEqualOrNotEqual$$Choice1(final int yyStart) 
    throws IOException {

    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('=' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('=' == yyC) {
        yyIndex = yyIndex + 1;

        yyValue = null;

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('!' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('=' == yyC) {
        yyIndex = yyIndex + 1;

        yyValue = null;

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Done.
    yyError = yyError.select("equal or not equal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.RelationalExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pRelationalExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fRelationalExpression) 
      yyColumn.chunk2.fRelationalExpression = pRelationalExpression$1(yyStart);
    return yyColumn.chunk2.fRelationalExpression;
  }

  /** Actually parse epsilon.RelationalExpression. */
  private Result pRelationalExpression$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pUnaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pRelationalExpression$$Star1(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Pair<Node> v$g$3 = yyResult.semanticValue();

          yyValue = GNode.create("RelationalExpression", v$g$1, v$g$2, v$g$3);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.RelationalExpression$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pRelationalExpression$$Star1(final int yyStart) 
    throws IOException {

    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fRelationalExpression$$Star1) 
      yyColumn.chunk2.fRelationalExpression$$Star1 = pRelationalExpression$$Star1$1(yyStart);
    return yyColumn.chunk2.fRelationalExpression$$Star1;
  }

  /** Actually parse epsilon.RelationalExpression$$Star1. */
  private Result pRelationalExpression$$Star1$1(final int yyStart) 
    throws IOException {

    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLessOrMore(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pRelationalExpression$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$2 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.LessOrMore.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLessOrMore(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pLessOrMore$$Choice1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pUnaryExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("LessOrMore", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.LessOrMore$$Choice1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLessOrMore$$Choice1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('<' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('=' == yyC) {
        yyIndex = yyIndex + 1;

        yyValue = null;

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('<' == yyC) {
      yyIndex = yyStart + 1;

      yyValue = null;

      return new SemanticValue(yyValue, yyIndex, yyError);
    }

    // Alternative 3.

    yyC = character(yyStart);
    if ('>' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('=' == yyC) {
        yyIndex = yyIndex + 1;

        yyValue = null;

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Alternative 4.

    yyC = character(yyStart);
    if ('>' == yyC) {
      yyIndex = yyStart + 1;

      yyValue = null;

      return new SemanticValue(yyValue, yyIndex, yyError);
    }

    // Done.
    yyError = yyError.select("less or more expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.UnaryExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pUnaryExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk2) yyColumn.chunk2 = new Chunk2();
    if (null == yyColumn.chunk2.fUnaryExpression) 
      yyColumn.chunk2.fUnaryExpression = pUnaryExpression$1(yyStart);
    return yyColumn.chunk2.fUnaryExpression;
  }

  /** Actually parse epsilon.UnaryExpression. */
  private Result pUnaryExpression$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pPostfixExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("UnaryExpression", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('!' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyResult = pUnaryExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$3 = yyResult.semanticValue();

          yyValue = GNode.create("UnaryExpression", v$g$2, v$g$3);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("unary expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.PostfixExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pPostfixExpression(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pFunctionCall(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("PostfixExpression", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pPrimaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$2 = yyResult.semanticValue();

      yyValue = GNode.create("PostfixExpression", v$g$2);

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionCall.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionCall(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pPrimaryExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyRepetition1 = yyResult.index;
      yyRepeated1   = false;
      yyRepValue1   = Pair.empty();
      while (true) {

        yyResult = pFunctionCallMore(yyRepetition1);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$el$1 = yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepeated1   = true;
          yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }

      if (yyRepeated1) {
        Pair<Node> v$g$2 = yyRepValue1.reverse();

        yyValue = GNode.create("FunctionCall", v$g$1, v$g$2);

        return new SemanticValue(yyValue, yyRepetition1, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionCallMore.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionCallMore(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    Node       yyOpValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('(' == yyC) {
      yyIndex = yyStart + 1;
      String v$g$1 = "(";

      yyOption1  = yyIndex;
      yyOpValue1 = null;

      yyResult = pArgumentExpressionList(yyOption1);
      yyError  = yyResult.select(yyError, yyOption1);
      if (yyResult.hasValue()) {
        Node v$el$1 = yyResult.semanticValue();

        yyOption1  = yyResult.index;
        yyOpValue1 = v$el$1;
      }
      { // Start scope for v$g$2.
        Node v$g$2 = yyOpValue1;

        yyBase = yyOption1;
        yyC    = character(yyBase);
        if (')' == yyC) {
          yyIndex = yyOption1 + 1;
          String v$g$3 = ")";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$4 = yyResult.semanticValue();

            yyValue = GNode.create("FunctionCallMore", v$g$1, v$g$2, v$g$3, v$g$4);

            return yyResult.createValue(yyValue, yyError);
          }
        } else {
          yyError = yyError.select("')' expected", yyBase);
        }
      } // End scope for v$g$2.
    }

    // Done.
    yyError = yyError.select("function call more expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.ArgumentExpressionList.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pArgumentExpressionList(final int yyStart) 
    throws IOException {

    Result     yyResult;
    int        yyRepetition1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pAssignmentExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepValue1   = Pair.empty();
        while (true) {

          yyResult = pAssignmentExpressionRepeat(yyRepetition1);
          yyError  = yyResult.select(yyError, yyRepetition1);
          if (yyResult.hasValue()) {
            Node v$el$1 = yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }
        { // Start scope for v$g$3.
          Pair<Node> v$g$3 = yyRepValue1.reverse();

          yyValue = GNode.create("ArgumentExpressionList", v$g$1, v$g$2, v$g$3);

          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$3.
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.AssignmentExpressionRepeat.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pAssignmentExpressionRepeat(final int yyStart) 
    throws IOException {

    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (',' == yyC) {
      yyIndex = yyStart + 1;

      yyResult = pL(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$1 = yyResult.semanticValue();

        yyResult = pAssignmentExpression(yyResult.index);
        yyError  = yyResult.select(yyError);
        if (yyResult.hasValue()) {
          Node v$g$2 = yyResult.semanticValue();

          yyValue = GNode.create("AssignmentExpressionRepeat", v$g$1, v$g$2);

          return yyResult.createValue(yyValue, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("assignment expression repeat expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.PrimaryExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pPrimaryExpression(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fPrimaryExpression) 
      yyColumn.chunk3.fPrimaryExpression = pPrimaryExpression$1(yyStart);
    return yyColumn.chunk3.fPrimaryExpression;
  }

  /** Actually parse epsilon.PrimaryExpression. */
  private Result pPrimaryExpression$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pConstant(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyValue = GNode.create("PrimaryExpression", v$g$1, v$g$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('(' == yyC) {
      yyIndex = yyStart + 1;
      String v$g$3 = "(";

      yyResult = pExpression(yyIndex);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$4 = yyResult.semanticValue();

        yyBase = yyResult.index;
        yyC    = character(yyBase);
        if (')' == yyC) {
          yyIndex = yyResult.index + 1;
          String v$g$5 = ")";

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$6 = yyResult.semanticValue();

            yyValue = GNode.create("PrimaryExpression", v$g$3, v$g$4, v$g$5, v$g$6);

            return yyResult.createValue(yyValue, yyError);
          }
        } else {
          yyError = yyError.select("')' expected", yyBase);
        }
      }
    }

    // Alternative 3.

    yyResult = pFunctionExpression(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$7 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$8 = yyResult.semanticValue();

        yyValue = GNode.create("PrimaryExpression", v$g$7, v$g$8);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 4.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$9 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$10 = yyResult.semanticValue();

        yyValue = GNode.create("PrimaryExpression", v$g$9, v$g$10);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    yyError = yyError.select("primary expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.FunctionExpression.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pFunctionExpression(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyBase;
    int        yyOption1;
    Node       yyOpValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('f' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('u' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('n' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('c' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('t' == yyC) {
              yyIndex = yyIndex + 1;

              yyC = character(yyIndex);
              if ('i' == yyC) {
                yyIndex = yyIndex + 1;

                yyC = character(yyIndex);
                if ('o' == yyC) {
                  yyIndex = yyIndex + 1;

                  yyC = character(yyIndex);
                  if ('n' == yyC) {
                    yyIndex = yyIndex + 1;
                    String v$g$1 = "function";

                    yyResult = pL(yyIndex);
                    yyError  = yyResult.select(yyError);
                    if (yyResult.hasValue()) {
                      Node v$g$2 = yyResult.semanticValue();

                      yyOption1  = yyResult.index;
                      yyOpValue1 = null;

                      yyResult = pIdentifierSkip(yyOption1);
                      yyError  = yyResult.select(yyError, yyOption1);
                      if (yyResult.hasValue()) {
                        Node v$el$1 = yyResult.semanticValue();

                        yyOption1  = yyResult.index;
                        yyOpValue1 = v$el$1;
                      }
                      { // Start scope for v$g$3.
                        Node v$g$3 = yyOpValue1;

                        yyBase = yyOption1;
                        yyC    = character(yyBase);
                        if ('(' == yyC) {
                          yyIndex = yyOption1 + 1;
                          String v$g$4 = "(";

                          yyResult = pFunctionParamList(yyIndex);
                          yyError  = yyResult.select(yyError);
                          if (yyResult.hasValue()) {
                            Node v$g$5 = yyResult.semanticValue();

                            yyBase = yyResult.index;
                            yyC    = character(yyBase);
                            if (')' == yyC) {
                              yyIndex = yyResult.index + 1;
                              String v$g$6 = ")";

                              yyResult = pL(yyIndex);
                              yyError  = yyResult.select(yyError);
                              if (yyResult.hasValue()) {
                                Node v$g$7 = yyResult.semanticValue();

                                yyResult = pBlock(yyResult.index);
                                yyError  = yyResult.select(yyError);
                                if (yyResult.hasValue()) {
                                  Node v$g$8 = yyResult.semanticValue();

                                  yyBase = yyResult.index;
                                  yyC    = character(yyBase);
                                  if (':' == yyC) {
                                    yyIndex = yyResult.index + 1;

                                    yyC = character(yyIndex);
                                    if (':' == yyC) {
                                      yyIndex = yyIndex + 1;

                                      yyResult = pL(yyIndex);
                                      yyError  = yyResult.select(yyError);
                                      if (yyResult.hasValue()) {
                                        Node v$g$9 = yyResult.semanticValue();

                                        yyValue = GNode.create("FunctionExpression", 9).
                                          add(v$g$1).add(v$g$2).add(v$g$3).add(v$g$4).add(v$g$5).add(v$g$6).add(v$g$7).add(v$g$8).add(v$g$9);

                                        return yyResult.createValue(yyValue, yyError);
                                      }
                                    } else {
                                      yyError = yyError.select("'::' expected", yyBase);
                                    }
                                  } else {
                                    yyError = yyError.select("'::' expected", yyBase);
                                  }
                                }
                              }
                            } else {
                              yyError = yyError.select("')' expected", yyBase);
                            }
                          }
                        } else {
                          yyError = yyError.select("'(' expected", yyBase);
                        }
                      } // End scope for v$g$3.
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("function expression expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.IdentifierSkip.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pIdentifierSkip(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIdentifier(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyValue = GNode.create("IdentifierSkip", v$g$1, v$g$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Constant.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pConstant(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pIntegerLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("Constant", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pBooleanLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$2 = yyResult.semanticValue();

      yyValue = GNode.create("Constant", v$g$2);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pStringLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$3 = yyResult.semanticValue();

      yyValue = GNode.create("Constant", v$g$3);

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 4.

    yyResult = pNullLiteral(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$4 = yyResult.semanticValue();

      yyValue = GNode.create("Constant", v$g$4);

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.IntegerLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pIntegerLiteral(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pDecimal(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyValue = GNode.create("IntegerLiteral", v$g$1, v$g$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Decimal.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDecimal(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    int        yyRepetition1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyRepetition1 = yyIndex;
          yyRepValue1   = Pair.empty();
          while (true) {

            yyResult = pDIGIT(yyRepetition1);
            yyError  = yyResult.select(yyError, yyRepetition1);
            if (yyResult.hasValue()) {
              Node v$el$1 = yyResult.semanticValue();

              yyRepetition1 = yyResult.index;
              yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
              continue;
            }
            break;
          }
          { // Start scope for v$g$1.
            Pair<Node> v$g$1 = yyRepValue1.reverse();

            yyValue = GNode.create("Decimal", v$g$1);

            return new SemanticValue(yyValue, yyRepetition1, yyError);
          } // End scope for v$g$1.
        }

      case '0':
        {
          yyValue = GNode.create("Decimal", false);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("decimal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.BooleanLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBooleanLiteral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('t' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('r' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('u' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('e' == yyC) {
            yyIndex = yyIndex + 1;
            String v$g$1 = "true";

            yyResult = pL(yyIndex);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$2 = yyResult.semanticValue();

              yyValue = GNode.create("BooleanLiteral", v$g$1, v$g$2);

              return yyResult.createValue(yyValue, yyError);
            }
          }
        }
      }
    }

    // Alternative 2.

    yyC = character(yyStart);
    if ('f' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('a' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('l' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('s' == yyC) {
            yyIndex = yyIndex + 1;

            yyC = character(yyIndex);
            if ('e' == yyC) {
              yyIndex = yyIndex + 1;
              String v$g$3 = "false";

              yyResult = pL(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {
                Node v$g$4 = yyResult.semanticValue();

                yyValue = GNode.create("BooleanLiteral", v$g$3, v$g$4);

                return yyResult.createValue(yyValue, yyError);
              }
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("boolean literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.StringLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStringLiteral(final int yyStart) throws IOException {
    int          yyC;
    int          yyIndex;
    Result       yyResult;
    int          yyRepetition1;
    Pair<String> yyRepValue1;
    Node         yyValue;
    ParseError   yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('\"' == yyC) {
      yyIndex = yyStart + 1;

      yyRepetition1 = yyIndex;
      yyRepValue1   = Pair.empty();
      while (true) {

        yyResult = pStringContent(yyRepetition1);
        yyError  = yyResult.select(yyError, yyRepetition1);
        if (yyResult.hasValue()) {
          String v$el$1 = yyResult.semanticValue();

          yyRepetition1 = yyResult.index;
          yyRepValue1   = new Pair<String>(v$el$1, yyRepValue1);
          continue;
        }
        break;
      }
      { // Start scope for v$g$1.
        Pair<String> v$g$1 = yyRepValue1.reverse();

        yyC = character(yyRepetition1);
        if ('\"' == yyC) {
          yyIndex = yyRepetition1 + 1;

          yyResult = pL(yyIndex);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$g$2 = yyResult.semanticValue();

            yyValue = GNode.create("StringLiteral", v$g$1, v$g$2);

            return yyResult.createValue(yyValue, yyError);
          }
        }
      } // End scope for v$g$1.
    }

    // Done.
    yyError = yyError.select("string literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.StringContent.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pStringContent(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    String     yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\n':
      case '\"':
      case '\\':
        /* No match. */
        break;

      default:
        {
          yyValue = difference(yyStart, yyIndex);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }
      }
    }

    // Done.
    yyError = yyError.select("string content expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.NullLiteral.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNullLiteral(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('n' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('u' == yyC) {
        yyIndex = yyIndex + 1;

        yyC = character(yyIndex);
        if ('l' == yyC) {
          yyIndex = yyIndex + 1;

          yyC = character(yyIndex);
          if ('l' == yyC) {
            yyIndex = yyIndex + 1;
            String v$g$1 = "null";

            yyResult = pL(yyIndex);
            yyError  = yyResult.select(yyError);
            if (yyResult.hasValue()) {
              Node v$g$2 = yyResult.semanticValue();

              yyValue = GNode.create("NullLiteral", v$g$1, v$g$2);

              return yyResult.createValue(yyValue, yyError);
            }
          }
        }
      }
    }

    // Done.
    yyError = yyError.select("null literal expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.L.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pL(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fL) yyColumn.chunk3.fL = pL$1(yyStart);
    return yyColumn.chunk3.fL;
  }

  /** Actually parse epsilon.L. */
  private Result pL$1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pL$$Star1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Pair<Node> v$g$1 = yyResult.semanticValue();

      yyValue = GNode.create("L", v$g$1);

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.L$$Choice1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pL$$Choice1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pS(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pBlockComment(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 3.

    yyResult = pLineComment(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.L$$Star1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pL$$Star1(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fL$$Star1) 
      yyColumn.chunk3.fL$$Star1 = pL$$Star1$1(yyStart);
    return yyColumn.chunk3.fL$$Star1;
  }

  /** Actually parse epsilon.L$$Star1. */
  private Result pL$$Star1$1(final int yyStart) throws IOException {
    Result     yyResult;
    Pair<Node> yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pL$$Choice1(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$el$1 = yyResult.semanticValue();

      yyResult = pL$$Star1(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Pair<Node> v$5 = yyResult.semanticValue();

        yyValue = new Pair<Node>(v$el$1, v$5);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Alternative 2.

    yyValue = Pair.empty();

    return new SemanticValue(yyValue, yyStart, yyError);
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.S.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pS(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '\t':
      case '\n':
      case '\u000b':
      case '\f':
      case '\r':
      case ' ':
        {
          yyValue = GNode.create("S", false);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("S expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.BlockComment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pBlockComment(final int yyStart) throws IOException {
    int             yyC;
    int             yyIndex;
    int             yyPredIndex;
    boolean         yyPredMatched;
    int             yyBase;
    int             yyRepetition1;
    Pair<Character> yyRepValue1;
    Node            yyValue;
    ParseError      yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('*' == yyC) {
        yyIndex = yyIndex + 1;
        String v$g$1 = "/*";

        yyRepetition1 = yyIndex;
        yyRepValue1   = Pair.empty();
        while (true) {

          yyPredMatched = false;

          yyC = character(yyRepetition1);
          if ('*' == yyC) {
            yyPredIndex = yyRepetition1 + 1;

            yyC = character(yyPredIndex);
            if ('/' == yyC) {

              yyPredMatched = true;
            }
          }

          if (! yyPredMatched) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;
              char v$el$1 = (char)yyC;

              yyRepetition1 = yyIndex;
              yyRepValue1   = new Pair<Character>(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("block comment expected", yyStart);
          }
          break;
        }
        { // Start scope for v$g$2.
          Pair<Character> v$g$2 = yyRepValue1.reverse();

          yyBase = yyRepetition1;
          yyC    = character(yyBase);
          if ('*' == yyC) {
            yyIndex = yyRepetition1 + 1;

            yyC = character(yyIndex);
            if ('/' == yyC) {
              yyIndex = yyIndex + 1;
              String v$g$3 = "*/";

              yyValue = GNode.create("BlockComment", v$g$1, v$g$2, v$g$3);

              return new SemanticValue(yyValue, yyIndex, yyError);
            } else {
              yyError = yyError.select("'*/' expected", yyBase);
            }
          } else {
            yyError = yyError.select("'*/' expected", yyBase);
          }
        } // End scope for v$g$2.
      }
    }

    // Done.
    yyError = yyError.select("block comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.LineComment.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pLineComment(final int yyStart) throws IOException {
    int             yyC;
    int             yyIndex;
    boolean         yyPredMatched;
    int             yyRepetition1;
    Pair<Character> yyRepValue1;
    Node            yyValue;
    ParseError      yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if ('/' == yyC) {
      yyIndex = yyStart + 1;

      yyC = character(yyIndex);
      if ('/' == yyC) {
        yyIndex = yyIndex + 1;
        String v$g$1 = "//";

        yyRepetition1 = yyIndex;
        yyRepValue1   = Pair.empty();
        while (true) {

          yyPredMatched = false;

          yyC = character(yyRepetition1);
          if ('\n' == yyC) {

            yyPredMatched = true;
          }

          if (! yyPredMatched) {

            yyC = character(yyRepetition1);
            if (-1 != yyC) {
              yyIndex = yyRepetition1 + 1;
              char v$el$1 = (char)yyC;

              yyRepetition1 = yyIndex;
              yyRepValue1   = new Pair<Character>(v$el$1, yyRepValue1);
              continue;
            }
          } else {
            yyError = yyError.select("line comment expected", yyStart);
          }
          break;
        }
        { // Start scope for v$g$2.
          Pair<Character> v$g$2 = yyRepValue1.reverse();

          yyValue = GNode.create("LineComment", v$g$1, v$g$2);

          return new SemanticValue(yyValue, yyRepetition1, yyError);
        } // End scope for v$g$2.
      }
    }

    // Done.
    yyError = yyError.select("line comment expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.EOT.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pEOT(final int yyStart) throws IOException {
    int        yyC;
    boolean    yyPredMatched;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyPredMatched = false;

    yyC = character(yyStart);
    if (-1 != yyC) {

      yyPredMatched = true;
    }

    if (! yyPredMatched) {

      yyValue = GNode.create("EOT", false);

      return new SemanticValue(yyValue, yyStart, yyError);
    } else {
      yyError = yyError.select("EOT expected", yyStart);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.Identifier.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pIdentifier(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fIdentifier) 
      yyColumn.chunk3.fIdentifier = pIdentifier$1(yyStart);
    return yyColumn.chunk3.fIdentifier;
  }

  /** Actually parse epsilon.Identifier. */
  private Result pIdentifier$1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pNAME(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      Node v$g$1 = yyResult.semanticValue();

      yyResult = pL(yyResult.index);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$g$2 = yyResult.semanticValue();

        yyValue = GNode.create("Identifier", v$g$1, v$g$2);

        return yyResult.createValue(yyValue, yyError);
      }
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.NAME.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNAME(final int yyStart) throws IOException {
    Result     yyResult;
    Result     yyPredResult;
    boolean    yyPredMatched;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyPredMatched = false;

    yyPredResult = pDIGIT(yyStart);
    if (yyPredResult.hasValue()) {

      yyPredMatched = true;
    }

    if (! yyPredMatched) {

      yyPredMatched = false;

      yyPredResult = pKEYWORD(yyStart);
      if (yyPredResult.hasValue()) {

        yyPredResult = pNW(yyPredResult.index);
        if (yyPredResult.hasValue()) {

          yyPredMatched = true;
        }
      }

      if (! yyPredMatched) {

        yyRepetition1 = yyStart;
        yyRepeated1   = false;
        yyRepValue1   = Pair.empty();
        while (true) {

          yyResult = pW(yyRepetition1);
          yyError  = yyResult.select(yyError);
          if (yyResult.hasValue()) {
            Node v$el$1 = yyResult.semanticValue();

            yyRepetition1 = yyResult.index;
            yyRepeated1   = true;
            yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
            continue;
          }
          break;
        }

        if (yyRepeated1) {
          Pair<Node> v$g$1 = yyRepValue1.reverse();

          yyValue = GNode.create("NAME", v$g$1);

          return new SemanticValue(yyValue, yyRepetition1, yyError);
        }
      } else {
        yyError = yyError.select("NAME expected", yyStart);
      }
    } else {
      yyError = yyError.select("NAME expected", yyStart);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.DIGIT.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pDIGIT(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fDIGIT) 
      yyColumn.chunk3.fDIGIT = pDIGIT$1(yyStart);
    return yyColumn.chunk3.fDIGIT;
  }

  /** Actually parse epsilon.DIGIT. */
  private Result pDIGIT$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        {
          yyValue = GNode.create("DIGIT", false);

          return new SemanticValue(yyValue, yyIndex, yyError);
        }

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("DIGIT expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.W.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pW(final int yyStart) throws IOException {
    epsilonColumn yyColumn = (epsilonColumn)column(yyStart);
    if (null == yyColumn.chunk3) yyColumn.chunk3 = new Chunk3();
    if (null == yyColumn.chunk3.fW) yyColumn.chunk3.fW = pW$1(yyStart);
    return yyColumn.chunk3.fW;
  }

  /** Actually parse epsilon.W. */
  private Result pW$1(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;
      if (('$' == yyC) ||
          (('0' <= yyC) && (yyC <= '9')) ||
          (('A' <= yyC) && (yyC <= 'Z')) ||
          ('_' == yyC) ||
          (('a' <= yyC) && (yyC <= 'z'))) {

        yyValue = GNode.create("W", false);

        return new SemanticValue(yyValue, yyIndex, yyError);
      }
    }

    // Done.
    yyError = yyError.select("W expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.NW.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pNW(final int yyStart) throws IOException {
    Result     yyPredResult;
    boolean    yyPredMatched;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyPredMatched = false;

    yyPredResult = pW(yyStart);
    if (yyPredResult.hasValue()) {

      yyPredMatched = true;
    }

    if (! yyPredMatched) {

      yyValue = null;

      return new SemanticValue(yyValue, yyStart, yyError);
    } else {
      yyError = yyError.select("NW expected", yyStart);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.TopLevel.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pTopLevel(final int yyStart) throws IOException {
    Result     yyResult;
    int        yyRepetition1;
    boolean    yyRepeated1;
    Pair<Node> yyRepValue1;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyRepetition1 = yyStart;
    yyRepeated1   = false;
    yyRepValue1   = Pair.empty();
    while (true) {

      yyResult = pTopLevel$$Choice1(yyRepetition1);
      yyError  = yyResult.select(yyError);
      if (yyResult.hasValue()) {
        Node v$el$1 = yyResult.semanticValue();

        yyRepetition1 = yyResult.index;
        yyRepeated1   = true;
        yyRepValue1   = new Pair<Node>(v$el$1, yyRepValue1);
        continue;
      }
      break;
    }

    if (yyRepeated1) {
      Pair<Node> v$g$1 = yyRepValue1.reverse();

      yyValue = GNode.create("TopLevel", v$g$1);

      return new SemanticValue(yyValue, yyRepetition1, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse synthetic nonterminal epsilon.TopLevel$$Choice1.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pTopLevel$$Choice1(final int yyStart) throws IOException {
    Result     yyResult;
    Node       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyResult = pStatement(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Alternative 2.

    yyResult = pDeclaration(yyStart);
    yyError  = yyResult.select(yyError);
    if (yyResult.hasValue()) {
      yyValue = yyResult.semanticValue();

      return yyResult.createValue(yyValue, yyError);
    }

    // Done.
    return yyError;
  }

  // =========================================================================

  /**
   * Parse nonterminal epsilon.KEYWORD.
   *
   * @param yyStart The index.
   * @return The result.
   * @throws IOException Signals an I/O error.
   */
  private Result pKEYWORD(final int yyStart) throws IOException {
    int        yyC;
    int        yyIndex;
    Result     yyResult;
    Void       yyValue;
    ParseError yyError = ParseError.DUMMY;

    // Alternative 1.

    yyC = character(yyStart);
    if (-1 != yyC) {
      yyIndex = yyStart + 1;

      switch (yyC) {
      case 'e':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('l' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('s' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('e' == yyC) {

                      yyResult = pL(yyIndex);
                      yyError  = yyResult.select(yyError);
                      if (yyResult.hasValue()) {

                        yyValue = null;

                        return yyResult.createValue(yyValue, yyError);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;

      case 'i':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('f' == yyC) {

              yyResult = pL(yyIndex);
              yyError  = yyResult.select(yyError);
              if (yyResult.hasValue()) {

                yyValue = null;

                return yyResult.createValue(yyValue, yyError);
              }
            }
          }
        }
        break;

      case 'r':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('e' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('t' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('u' == yyC) {

                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;
                        if ('r' == yyC) {

                          yyC = character(yyIndex);
                          if (-1 != yyC) {
                            yyIndex = yyIndex + 1;
                            if ('n' == yyC) {

                              yyResult = pL(yyIndex);
                              yyError  = yyResult.select(yyError);
                              if (yyResult.hasValue()) {

                                yyValue = null;

                                return yyResult.createValue(yyValue, yyError);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;

      case 'f':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('u' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('n' == yyC) {

                  yyC = character(yyIndex);
                  if (-1 != yyC) {
                    yyIndex = yyIndex + 1;
                    if ('c' == yyC) {

                      yyC = character(yyIndex);
                      if (-1 != yyC) {
                        yyIndex = yyIndex + 1;
                        if ('t' == yyC) {

                          yyC = character(yyIndex);
                          if (-1 != yyC) {
                            yyIndex = yyIndex + 1;
                            if ('i' == yyC) {

                              yyC = character(yyIndex);
                              if (-1 != yyC) {
                                yyIndex = yyIndex + 1;
                                if ('o' == yyC) {

                                  yyC = character(yyIndex);
                                  if (-1 != yyC) {
                                    yyIndex = yyIndex + 1;
                                    if ('n' == yyC) {

                                      yyResult = pL(yyIndex);
                                      yyError  = yyResult.select(yyError);
                                      if (yyResult.hasValue()) {

                                        yyValue = null;

                                        return yyResult.createValue(yyValue, yyError);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        break;

      case 'v':
        {
          yyC = character(yyIndex);
          if (-1 != yyC) {
            yyIndex = yyIndex + 1;
            if ('a' == yyC) {

              yyC = character(yyIndex);
              if (-1 != yyC) {
                yyIndex = yyIndex + 1;
                if ('r' == yyC) {

                  yyResult = pL(yyIndex);
                  yyError  = yyResult.select(yyError);
                  if (yyResult.hasValue()) {

                    yyValue = null;

                    return yyResult.createValue(yyValue, yyError);
                  }
                }
              }
            }
          }
        }
        break;

      default:
        /* No match. */
      }
    }

    // Done.
    yyError = yyError.select("KEYWORD expected", yyStart);
    return yyError;
  }

  // =========================================================================

  /**
   * Get the specified text.
   *
   * @param s The text.
   * @return The text.
   */
  protected static final String toText(String s) {
    return s;
  }

}
