
// This is a Grammar for Rats! generated by Nez Grammar Generator.

module java;

public generic File
   = UBAR ( (Alt0_0? (Alt0_1* (Alt0_2* ( ( (UBAR EOT)))))))
   ;
generic Alt0_0
   = PackageDeclaration
   ;
generic Alt0_1
   = ImportDeclaration
   ;
generic Alt0_2
   = TypeDeclaration
   ;
public generic UBAR
   = (S / BLOCKCOMMENT / LINECOMMENT)*
   ;
public generic S
   = void:' '
   / void:'\n'
   / void:'\r'
   / void:'\t'
   / void:0x0b
   / void:0x0c
   ;
public generic BLOCKCOMMENT
   = void:'/' (void:'*' (Alt3_0* (void:"*/")))
   ;
generic Alt3_0
   = !Alt3_1 _
   ;
generic Alt3_1
   = void:"*/"
   ;
public generic LINECOMMENT
   = void:'/' (void:'/' Alt4_0*)
   ;
generic Alt4_0
   = !(void:'\n') _
   ;
public generic PackageDeclaration
   =  (Alt5_0? (void:'p' (void:'a' (void:'c' (void:'k' (void:'a' (void:'g' (void:'e' (!W (UBAR (QualifiedName ( ( (void:';' UBAR))))))))))))))
   ;
generic Alt5_0
   = Annotations
   ;
public generic Annotations
   =  (Annotation (Alt6_0* ( )))
   ;
generic Alt6_0
   = Annotation
   ;
public generic Annotation
   = void:'@' (UBAR ( (QualifiedName (void:'(' (UBAR (Alt7_0? (void:')' (UBAR ( )))))))))
   / void:'@' (UBAR ( (QualifiedName (void:'(' (UBAR (ElementValue (void:')' (UBAR ( )))))))))
   / void:'@' (UBAR ( (QualifiedName ( ))))
   ;
generic Alt7_0
   = ElementValuePairList
   ;
public generic QualifiedName
   = Identifier Alt8_0*
   ;
generic Alt8_0
   =  (void:'.' (!(void:'.') (UBAR (Identifier ( )))))
   ;
public generic Identifier
   =  (NAME ( ( UBAR)))
   ;
public generic NAME
   = !DIGIT (!Alt10_0 W+)
   ;
generic Alt10_0
   = KEYWORD !W
   ;
public generic DIGIT
   = void:[0-9]
   ;
public generic KEYWORD
   = void:'a' (void:'b' (void:'s' (void:'t' (void:'r' (void:'a' (void:'c' (void:'t' (!W UBAR))))))))
   / void:'a' (void:'s' (void:'s' (void:'e' (void:'r' (void:'t' (!W UBAR))))))
   / void:'b' (void:'o' (void:'o' (void:'l' (void:'e' (void:'a' (void:'n' (!W UBAR)))))))
   / void:'b' (void:'r' (void:'e' (void:'a' (void:'k' (!W UBAR)))))
   / void:'b' (void:'y' (void:'t' (void:'e' (!W UBAR))))
   / void:'c' (void:'a' (void:'s' (void:'e' (!W UBAR))))
   / void:'c' (void:'a' (void:'t' (void:'c' (void:'h' (!W UBAR)))))
   / void:'c' (void:'h' (void:'a' (void:'r' (!W UBAR))))
   / void:'c' (void:'l' (void:'a' (void:'s' (void:'s' (!W UBAR)))))
   / void:'c' (void:'o' (void:'n' (void:'s' (void:'t' (!W UBAR)))))
   / void:'c' (void:'o' (void:'n' (void:'t' (void:'i' (void:'n' (void:'u' (void:'e' (!W UBAR))))))))
   / void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' (!W UBAR)))))))
   / void:'d' (void:'o' (void:'u' (void:'b' (void:'l' (void:'e' (!W UBAR))))))
   / void:'d' (void:'o' (!W UBAR))
   / void:'e' (void:'l' (void:'s' (void:'e' (!W UBAR))))
   / void:'e' (void:'n' (void:'u' (void:'m' (!W UBAR))))
   / void:'e' (void:'x' (void:'t' (void:'e' (void:'n' (void:'d' (void:'s' (!W UBAR)))))))
   / void:'f' (void:'a' (void:'l' (void:'s' (void:'e' (!W UBAR)))))
   / void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (!W UBAR)))))
   / void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (void:'l' (void:'y' (!W UBAR)))))))
   / void:'f' (void:'l' (void:'o' (void:'a' (void:'t' (!W UBAR)))))
   / void:'f' (void:'o' (void:'r' (!W UBAR)))
   / void:'g' (void:'o' (void:'t' (void:'o' (!W UBAR))))
   / void:'i' (void:'f' (!W UBAR))
   / void:'i' (void:'m' (void:'p' (void:'l' (void:'e' (void:'m' (void:'e' (void:'n' (void:'t' (void:'s' (!W UBAR))))))))))
   / void:'i' (void:'m' (void:'p' (void:'o' (void:'r' (void:'t' (!W UBAR))))))
   / void:'i' (void:'n' (void:'s' (void:'t' (void:'a' (void:'n' (void:'c' (void:'e' (void:'o' (void:'f' (!W UBAR))))))))))
   / void:'i' (void:'n' (void:'t' (void:'e' (void:'r' (void:'f' (void:'a' (void:'c' (void:'e' (!W UBAR)))))))))
   / void:'i' (void:'n' (void:'t' (!W UBAR)))
   / void:'l' (void:'o' (void:'n' (void:'g' (!W UBAR))))
   / void:'n' (void:'a' (void:'t' (void:'i' (void:'v' (void:'e' (!W UBAR))))))
   / void:'n' (void:'e' (void:'w' (!W UBAR)))
   / void:'n' (void:'u' (void:'l' (void:'l' (!W UBAR))))
   / void:'p' (void:'a' (void:'c' (void:'k' (void:'a' (void:'g' (void:'e' (!W UBAR)))))))
   / void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' (!W UBAR)))))))
   / void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W UBAR)))))))))
   / void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W UBAR))))))
   / void:'r' (void:'e' (void:'t' (void:'u' (void:'r' (void:'n' (!W UBAR))))))
   / void:'s' (void:'h' (void:'o' (void:'r' (void:'t' (!W UBAR)))))
   / void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W UBAR))))))
   / void:'s' (void:'t' (void:'r' (void:'i' (void:'c' (void:'t' (void:'f' (void:'p' (!W UBAR))))))))
   / void:'s' (void:'u' (void:'p' (void:'e' (void:'r' (!W UBAR)))))
   / void:'s' (void:'w' (void:'i' (void:'t' (void:'c' (void:'h' (!W UBAR))))))
   / void:'s' (void:'y' (void:'n' (void:'c' (void:'h' (void:'r' (void:'o' (void:'n' (void:'i' (void:'z' (void:'e' (void:'d' (!W UBAR))))))))))))
   / void:'t' (void:'h' (void:'i' (void:'s' (!W UBAR))))
   / void:'t' (void:'h' (void:'r' (void:'o' (void:'w' (void:'s' (!W UBAR))))))
   / void:'t' (void:'h' (void:'r' (void:'o' (void:'w' (!W UBAR)))))
   / void:'t' (void:'r' (void:'a' (void:'n' (void:'s' (void:'i' (void:'e' (void:'n' (void:'t' (!W UBAR)))))))))
   / void:'t' (void:'r' (void:'u' (void:'e' (!W UBAR))))
   / void:'t' (void:'r' (void:'y' (!W UBAR)))
   / void:'v' (void:'o' (void:'i' (void:'d' (!W UBAR))))
   / void:'v' (void:'o' (void:'l' (void:'a' (void:'t' (void:'i' (void:'l' (void:'e' (!W UBAR))))))))
   / void:'w' (void:'h' (void:'i' (void:'l' (void:'e' (!W UBAR)))))
   ;
public generic W
   = void:[a-z]
   / void:[A-Z]
   / void:[0-9]
   / void:'_'
   / void:'$'
   ;
public generic ElementValuePairList
   =  (ElementValuePair (Alt14_0* ( )))
   ;
generic Alt14_0
   = void:',' (UBAR ElementValuePair)
   ;
public generic ElementValuePair
   =  (Identifier (void:'=' (!(void:'=') (UBAR (ElementValue ( ))))))
   ;
public generic ElementValue
   = ElementValueArrayInitializer
   / ConditionalExpression
   / Annotation
   ;
public generic ElementValueArrayInitializer
   = void:'{' (UBAR ( (Alt17_0? ( ( (Alt17_1? (void:'}' UBAR)))))))
   ;
generic Alt17_0
   = ElementValueList
   ;
generic Alt17_1
   = void:',' UBAR
   ;
public generic ElementValueList
   =  (ElementValue (Alt18_0* ( )))
   ;
generic Alt18_0
   = void:',' (UBAR ElementValue)
   ;
public generic ConditionalExpression
   = LogicalOrExpression Alt19_0*
   ;
generic Alt19_0
   =  (void:'?' (UBAR (Expression (void:':' (!(void:'>' / void:':') (UBAR (LogicalOrExpression ( ))))))))
   ;
public generic LogicalOrExpression
   = LogicalAndExpression Alt20_0*
   ;
generic Alt20_0
   =  (void:'|' (void:'|' (UBAR (LogicalAndExpression ( )))))
   ;
public generic LogicalAndExpression
   = InclusiveOrExpression Alt21_0*
   ;
generic Alt21_0
   =  (void:'&' (void:'&' (UBAR (InclusiveOrExpression ( )))))
   ;
public generic InclusiveOrExpression
   = ExclusiveOrExpression Alt22_0*
   ;
generic Alt22_0
   =  (void:'|' (!(void:'|' / void:'=') (UBAR (ExclusiveOrExpression ( )))))
   ;
public generic ExclusiveOrExpression
   = AndExpression Alt23_0*
   ;
generic Alt23_0
   =  (void:'^' (!(void:'=') (UBAR (AndExpression ( )))))
   ;
public generic AndExpression
   = EqualityExpression Alt24_0*
   ;
generic Alt24_0
   =  (void:'&' (!(void:'&' / void:'=') (UBAR (EqualityExpression ( )))))
   ;
public generic EqualityExpression
   = RelationalExpression Alt25_0*
   ;
generic Alt25_0
   =  ((void:'=' (void:'=' (UBAR )) / void:'!' (void:'=' (UBAR ))) (RelationalExpression ))
   ;
public generic RelationalExpression
   = ShiftExpression Alt26_0*
   ;
generic Alt26_0
   =  ((relationalOperator ShiftExpression / void:'i' (void:'n' (void:'s' (void:'t' (void:'a' (void:'n' (void:'c' (void:'e' (void:'o' (void:'f' (!W (UBAR (ReferenceType ))))))))))))) )
   ;
public generic ShiftExpression
   = AdditiveExpression Alt27_0*
   ;
generic Alt27_0
   =  ((void:'<' (void:'<' (!(void:'=') (UBAR ))) / void:'>' (void:'>' (!(void:'=' / void:'>') (UBAR ))) / void:'>' (void:'>' (void:'>' (!(void:'=') (UBAR ))))) (AdditiveExpression ))
   ;
public generic AdditiveExpression
   = MultiplicativeExpression Alt28_0*
   ;
generic Alt28_0
   =  ((void:'+' (!(void:'+' / void:'=') (UBAR )) / void:'-' (!(void:'-' / void:'=' / void:'>') (UBAR ))) (MultiplicativeExpression ))
   ;
public generic MultiplicativeExpression
   = CastNewExpression Alt29_0*
   ;
generic Alt29_0
   =  ((void:'*' (!(void:'=') (UBAR )) / void:'/' (!(void:'=') (UBAR )) / void:'%' (!(void:'=' / void:'>') (UBAR ))) (CastNewExpression ))
   ;
public generic CastNewExpression
   =  (void:'(' (UBAR (Type (void:')' (UBAR (CastNewExpression ( )))))))
   / UnaryExpression
   ;
public generic Type
   = ReferenceType
   / PrimitiveType
   ;
public generic ReferenceType
   = ArrayType
   / ClassOrInterfaceType
   / TypeVariable
   ;
public generic ArrayType
   = (PrimitiveType / ClassOrInterfaceType / TypeVariable) Alt33_0+
   ;
generic Alt33_0
   =  (Alt33_1? (void:'[' (UBAR (void:']' (UBAR ( ))))))
   ;
generic Alt33_1
   = Annotations
   ;
public generic PrimitiveType
   =  (Annotations (UnannoPrimitiveType ( )))
   / UnannoPrimitiveType
   ;
public generic UnannoPrimitiveType
   = NumericType
   / BooleanType
   ;
public generic NumericType
   = IntegralType
   / FloatingPointType
   ;
public generic IntegralType
   =  (void:'b' (void:'y' (void:'t' (void:'e' (!W (UBAR ( )))))))
   /  (void:'c' (void:'h' (void:'a' (void:'r' (!W (UBAR ( )))))))
   /  (void:'s' (void:'h' (void:'o' (void:'r' (void:'t' (!W (UBAR ( ))))))))
   /  (void:'i' (void:'n' (void:'t' (!W (UBAR ( ))))))
   /  (void:'l' (void:'o' (void:'n' (void:'g' (!W (UBAR ( )))))))
   ;
public generic FloatingPointType
   =  (void:'f' (void:'l' (void:'o' (void:'a' (void:'t' (!W (UBAR ( ))))))))
   /  (void:'d' (void:'o' (void:'u' (void:'b' (void:'l' (void:'e' (!W (UBAR ( )))))))))
   ;
public generic BooleanType
   =  (void:'b' (void:'o' (void:'o' (void:'l' (void:'e' (void:'a' (void:'n' (!W (UBAR ( ))))))))))
   ;
public generic ClassOrInterfaceType
   = ClassType
   / InterfaceType
   ;
public generic ClassType
   = QualifiedName Alt41_0?
   ;
generic Alt41_0
   =  (TypeArguments ( ))
   ;
public generic TypeArguments
   =  (void:'<' (!(void:'=') (UBAR (Alt42_0? (void:'>' (!(void:'=') (UBAR ( ))))))))
   ;
generic Alt42_0
   = TypeArgument Alt42_1*
   ;
generic Alt42_1
   = void:',' (UBAR TypeArgument)
   ;
public generic TypeArgument
   = ReferenceType
   /  (Alt43_0? (void:'?' (UBAR ( ( Alt43_1?)))))
   ;
generic Alt43_0
   = Annotations
   ;
generic Alt43_1
   =  ((void:'e' (void:'x' (void:'t' (void:'e' (void:'n' (void:'d' (void:'s' (!W (UBAR )))))))) / void:'s' (void:'u' (void:'p' (void:'e' (void:'r' (!W (UBAR ))))))) (ReferenceType ))
   ;
public generic InterfaceType
   = ClassType
   ;
public generic TypeVariable
   =  (Annotations (Identifier ( )))
   / Identifier
   ;
public generic UnaryExpression
   = PostfixExpression
   /  (void:'+' (void:'+' (UBAR (UnaryExpression ( )))))
   /  (void:'-' (void:'-' (UBAR (UnaryExpression ( )))))
   /  (void:'+' (!(void:'+' / void:'=') (UBAR (CastNewExpression ( )))))
   /  (void:'-' (!(void:'-' / void:'=' / void:'>') (UBAR (CastNewExpression ( )))))
   /  (void:'~' (UBAR (CastNewExpression ( ))))
   /  (void:'!' (!(void:'=') (UBAR (CastNewExpression ( )))))
   ;
public generic PostfixExpression
   = PrimaryExpression Alt47_0*
   ;
generic Alt47_0
   =  ((addMethodCall / addInstanceCreation / addIndex / addField / addMethodReference / addInc / addDec) )
   ;
public generic PrimaryExpression
   = Constant
   / This
   / Super
   / void:'(' (UBAR (Expression (void:')' UBAR)))
   / ClassLiteral
   /  (QualifiedName (void:'.' (!(void:'.') (UBAR (void:'t' (void:'h' (void:'i' (void:'s' (!W (UBAR ( )))))))))))
   /  (QualifiedName (void:'.' (!(void:'.') (UBAR (void:'s' (void:'u' (void:'p' (void:'e' (void:'r' (!W (UBAR ( ))))))))))))
   / MethodInvocationExpression
   / InstanceCreationExpression
   / ArrayCreationExpression
   / MethodReference
   / Identifier
   ;
public generic Constant
   = Literal
   ;
public generic Literal
   = FloatingPointLiteral
   / IntegerLiteral
   / BooleanLiteral
   / CharacterLiteral
   / StringLiteral
   / NullLiteral
   ;
public generic FloatingPointLiteral
   =  (FLOAT ( ( (FLOATUBARSUFFIX? UBAR))))
   /  (DECIMAL ( ( (FLOATUBARSUFFIX UBAR))))
   ;
public generic FLOAT
   = FRACTION EXPONENT?
   / DIGIT+ EXPONENT
   ;
public generic FRACTION
   = !(void:'_') (Alt53_0* (void:'.' (DIGIT Alt53_1*)))
   / DIGIT (Alt53_2* void:'.')
   ;
generic Alt53_0
   = (void:'_')* DIGIT
   ;
generic Alt53_1
   = (void:'_')* DIGIT
   ;
generic Alt53_2
   = (void:'_')* DIGIT
   ;
public generic EXPONENT
   = (void:'e' / void:'E') ((void:'+' / void:'-')? (DIGIT Alt54_0*))
   ;
generic Alt54_0
   = (void:'_')* DIGIT
   ;
public generic FLOATUBARSUFFIX
   = void:'f'
   / void:'F'
   / void:'d'
   / void:'D'
   ;
public generic DECIMAL
   = void:'0' !(void:'b' / void:'B' / void:'x' / void:'X' / void:[0-9] / void:'_')
   / void:[1-9] Alt56_0*
   ;
generic Alt56_0
   = (void:'_')* DIGIT
   ;
public generic IntegerLiteral
   =  ((DECIMAL / HEXADECIMAL / BINARY / OCTAL) ((INTUBARSUFFIX  / FLOATUBARSUFFIX  / ) ( UBAR)))
   ;
public generic HEXADECIMAL
   = void:'0' ((void:'x' / void:'X') (HEX Alt58_0*))
   ;
generic Alt58_0
   = (void:'_')* HEX
   ;
public generic HEX
   = void:[a-f]
   / void:[A-F]
   / void:[0-9]
   ;
public generic BINARY
   = void:'0' ((void:'b' / void:'B') ((void:'0' / void:'1') Alt60_0*))
   ;
generic Alt60_0
   = (void:'_')* (void:'0' / void:'1')
   ;
public generic OCTAL
   = void:'0' Alt61_0*
   ;
generic Alt61_0
   = (void:'_')* void:[0-7]
   ;
public generic INTUBARSUFFIX
   = void:'l'
   / void:'L'
   ;
public generic BooleanLiteral
   =  (void:'t' (void:'r' (void:'u' (void:'e' (!W (UBAR ( )))))))
   /  (void:'f' (void:'a' (void:'l' (void:'s' (void:'e' (!W (UBAR ( ))))))))
   ;
public generic CharacterLiteral
   = void:'\'' ( (CHARUBARCONTENT* ( ( (void:'\'' UBAR)))))
   ;
public generic CHARUBARCONTENT
   = ESCAPE
   / !(void:'\'' / void:'\n' / void:'\\') _
   ;
public generic ESCAPE
   = SIMPLEUBARESCAPE
   / OCTALUBARESCAPE
   / HEXUBARESCAPE
   ;
public generic SIMPLEUBARESCAPE
   = void:'\\' (void:'\'' / void:'\\' / void:'"' / void:'\\' / void:'b' / void:'f' / void:'n' / void:'r' / void:'t')
   ;
public generic OCTALUBARESCAPE
   = void:'\\' (void:[0-3] (void:[0-7] void:[0-7]))
   / void:'\\' (void:[0-7] void:[0-7])
   / void:'\\' void:[0-7]
   ;
public generic HEXUBARESCAPE
   = void:'\\' ((void:'u')+ HEX4)
   ;
public generic HEX4
   = HEX (HEX (HEX HEX))
   ;
public generic StringLiteral
   = void:'"' ( (STRINGUBARCONTENT* ( ( (void:'"' UBAR)))))
   ;
public generic STRINGUBARCONTENT
   = ESCAPE
   / !(void:'\\' / void:'"' / void:'\n' / void:'\\') _
   ;
public generic NullLiteral
   =  (void:'n' (void:'u' (void:'l' (void:'l' (!W (UBAR ( )))))))
   ;
public generic This
   =  (void:'t' (void:'h' (void:'i' (void:'s' (!W (UBAR ( )))))))
   ;
public generic Super
   =  (void:'s' (void:'u' (void:'p' (void:'e' (void:'r' (!W (UBAR ( ))))))))
   ;
public generic Expression
   = LambdaExpression
   / AssignmentExpression
   ;
public generic LambdaExpression
   =  (LambdaParameters (void:'-' (void:'>' (UBAR (LambdaBody ( ))))))
   ;
public generic LambdaParameters
   =  ((Identifier /  (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( )))))) / void:'(' (UBAR (InferredFormalParameterList (void:')' UBAR)))) ( ))
   ;
public generic addArgumentExpressionList
   = Expression Alt79_0*
   ;
generic Alt79_0
   = void:',' (UBAR Expression)
   ;
public generic InferredFormalParameterList
   =  (Identifier (Alt80_0* ( )))
   ;
generic Alt80_0
   = void:',' (UBAR Identifier)
   ;
public generic LambdaBody
   = Expression
   / Block
   ;
public generic Block
   =  (void:'{' (UBAR ((Statement / LocalDeclaration)* (void:'}' (UBAR ( ))))))
   ;
public generic Statement
   = Block
   /  (void:'a' (void:'s' (void:'s' (void:'e' (void:'r' (void:'t' (!W (UBAR (Expression (Alt83_0? (void:';' (UBAR ( )))))))))))))
   /  (void:'i' (void:'f' (!W (UBAR (void:'(' (UBAR (Expression (void:')' (UBAR (Statement (Alt83_1? ( ))))))))))))
   /  (void:'s' (void:'w' (void:'i' (void:'t' (void:'c' (void:'h' (!W (UBAR (void:'(' (UBAR (Expression (void:')' (UBAR (Statement ( )))))))))))))))
   /  (void:'w' (void:'h' (void:'i' (void:'l' (void:'e' (!W (UBAR (void:'(' (UBAR (Expression (void:')' (UBAR (Statement ( ))))))))))))))
   /  (void:'d' (void:'o' (!W (UBAR (Statement (void:'w' (void:'h' (void:'i' (void:'l' (void:'e' (!W (UBAR (void:'(' (UBAR (Expression (void:')' (UBAR (void:';' (UBAR ( ))))))))))))))))))))
   /  (void:'f' (void:'o' (void:'r' (!W (UBAR (void:'(' (UBAR (Alt83_2? (void:';' (UBAR (Alt83_3? (void:';' (UBAR (Alt83_4? (void:')' (UBAR (Statement ( ))))))))))))))))))
   /  (void:'f' (void:'o' (void:'r' (!W (UBAR (void:'(' (UBAR (VariableDeclaration (void:';' (UBAR (Alt83_5? (void:';' (UBAR (Alt83_6? (void:')' (UBAR (Statement ( ))))))))))))))))))
   /  (void:'f' (void:'o' (void:'r' (!W (UBAR (void:'(' (UBAR (Alt83_7? (Type (Identifier (void:':' (!(void:'>' / void:':') (UBAR (Expression (void:')' (UBAR (Statement ( ))))))))))))))))))
   /  (void:'g' (void:'o' (void:'t' (void:'o' (!W (UBAR (Identifier (void:';' (UBAR ( ))))))))))
   /  (void:'c' (void:'o' (void:'n' (void:'t' (void:'i' (void:'n' (void:'u' (void:'e' (!W (UBAR (Alt83_8? (void:';' (UBAR ( ))))))))))))))
   /  (void:'b' (void:'r' (void:'e' (void:'a' (void:'k' (!W (UBAR (Alt83_9? (void:';' (UBAR ( )))))))))))
   /  (void:'r' (void:'e' (void:'t' (void:'u' (void:'r' (void:'n' (!W (UBAR (Alt83_10? (void:';' (UBAR ( ))))))))))))
   /  (void:'t' (void:'r' (void:'y' (!W (UBAR (ResourceStatement (Block (Alt83_11* (Alt83_12? ( ))))))))))
   /  (void:'t' (void:'r' (void:'y' (!W (UBAR (Block (Alt83_13* ( (void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (void:'l' (void:'y' (!W (UBAR (Block ( ))))))))))) ( )))))))))
   /  (void:'t' (void:'r' (void:'y' (!W (UBAR (Block (Alt83_14+ ( ))))))))
   /  (void:'t' (void:'h' (void:'r' (void:'o' (void:'w' (!W (UBAR (Expression (void:';' (UBAR ( )))))))))))
   /  (void:'s' (void:'y' (void:'n' (void:'c' (void:'h' (void:'r' (void:'o' (void:'n' (void:'i' (void:'z' (void:'e' (void:'d' (!W (UBAR (void:'(' (UBAR (Expression (void:')' (UBAR (Block ( )))))))))))))))))))))
   /  (void:'c' (void:'a' (void:'s' (void:'e' (!W (UBAR (ConstantExpression (void:':' (!(void:'>' / void:':') (UBAR (Alt83_15* ( ))))))))))))
   /  (void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' (!W (UBAR (void:':' (!(void:'>' / void:':') (UBAR (Alt83_16* ( ))))))))))))))
   /  (Identifier (void:':' (!(void:'>' / void:':') (UBAR ( )))))
   /  (Expression (void:';' (UBAR ( ))))
   /  (void:';' (UBAR ( )))
   ;
generic Alt83_0
   = void:':' (!(void:'>' / void:':') (UBAR Expression))
   ;
generic Alt83_1
   = void:'e' (void:'l' (void:'s' (void:'e' (!W (UBAR Statement)))))
   ;
generic Alt83_2
   = Expressions
   ;
generic Alt83_3
   = Expression
   ;
generic Alt83_4
   = Expressions
   ;
generic Alt83_5
   = Expression
   ;
generic Alt83_6
   = Expressions
   ;
generic Alt83_7
   = VariableModifiers
   ;
generic Alt83_8
   = Identifier
   ;
generic Alt83_9
   = Identifier
   ;
generic Alt83_10
   = Expression
   ;
generic Alt83_11
   = CatchBlock
   ;
generic Alt83_12
   =  (void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (void:'l' (void:'y' (!W (UBAR (Block ( )))))))))))
   ;
generic Alt83_13
   = CatchBlock
   ;
generic Alt83_14
   = CatchBlock
   ;
generic Alt83_15
   = !Alt83_17 (!Alt83_18 Statement)
   ;
generic Alt83_16
   = !Alt83_19 Statement
   ;
generic Alt83_17
   = void:'c' (void:'a' (void:'s' (void:'e' (!W UBAR))))
   ;
generic Alt83_18
   = void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' (!W UBAR)))))))
   ;
generic Alt83_19
   = void:'c' (void:'a' (void:'s' (void:'e' (!W UBAR))))
   ;
public generic Expressions
   =  (Expression (Alt84_0* ( )))
   ;
generic Alt84_0
   = void:',' (UBAR Expression)
   ;
public generic VariableDeclaration
   =  (Alt85_0? (Type (InitDeclList ( ))))
   ;
generic Alt85_0
   = VariableModifiers
   ;
public generic VariableModifiers
   =  (VariableModifier (Alt86_0* ( )))
   ;
generic Alt86_0
   = VariableModifier
   ;
public generic VariableModifier
   = Annotation
   / void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (!W (UBAR ( ( ))))))))
   ;
public generic InitDeclList
   =  (InitDecl (Alt88_0* ( )))
   ;
generic Alt88_0
   = void:',' (UBAR InitDecl)
   ;
public generic InitDecl
   =  (VarName (Alt89_0? ( )))
   ;
generic Alt89_0
   = void:'=' (!(void:'=') (UBAR Initializer))
   ;
public generic VarName
   = Identifier Alt90_0*
   ;
generic Alt90_0
   =  (void:'[' (UBAR (Alt90_1? (void:']' (UBAR ( ))))))
   ;
generic Alt90_1
   = ConstantExpression
   ;
public generic ConstantExpression
   = ConditionalExpression
   ;
public generic Initializer
   = Expression
   / ArrayInitializer
   ;
public generic ArrayInitializer
   =  (void:'{' (UBAR (Alt93_0? (Alt93_1? (void:'}' (UBAR ( )))))))
   ;
generic Alt93_0
   = Initializer Alt93_2*
   ;
generic Alt93_1
   = void:',' UBAR
   ;
generic Alt93_2
   = void:',' (UBAR Initializer)
   ;
public generic ResourceStatement
   = void:'(' (UBAR ( (Resource (Alt94_0* ( ( (Alt94_1? (void:')' UBAR))))))))
   ;
generic Alt94_0
   = void:';' (UBAR Resource)
   ;
generic Alt94_1
   = void:';' UBAR
   ;
public generic Resource
   =  (Alt95_0? (Type (Identifier (void:'=' (!(void:'=') (UBAR (Expression ( ))))))))
   ;
generic Alt95_0
   = VariableModifiers
   ;
public generic CatchBlock
   =  (void:'c' (void:'a' (void:'t' (void:'c' (void:'h' (!W (UBAR (void:'(' (UBAR (CatchParameter (void:')' (UBAR (Block ( ))))))))))))))
   ;
public generic CatchParameter
   =  (Alt97_0? (ClassOrInterfaceType (Identifier (Alt97_1* ( )))))
   ;
generic Alt97_0
   = VariableModifiers
   ;
generic Alt97_1
   = void:'|' (!(void:'|' / void:'=') (UBAR Identifier))
   ;
public generic LocalDeclaration
   = VariableDeclaration (void:';' UBAR)
   / ClassDeclaration
   ;
public generic ClassDeclaration
   =  (Alt99_0? (void:'c' (void:'l' (void:'a' (void:'s' (void:'s' (!W (UBAR (Identifier (Alt99_1? (Alt99_2? (Alt99_3* (ClassBody ( ))))))))))))))
   /  (Alt99_4? (void:'e' (void:'n' (void:'u' (void:'m' (!W (UBAR (Identifier (Alt99_5* (EnumBody ( )))))))))))
   ;
generic Alt99_0
   = ClassModifiers
   ;
generic Alt99_1
   = TypeParameters
   ;
generic Alt99_2
   = SuperClass
   ;
generic Alt99_3
   = SuperInterfaces
   ;
generic Alt99_4
   = ClassModifiers
   ;
generic Alt99_5
   = SuperInterfaces
   ;
public generic ClassModifiers
   =  (ClassModifier (Alt100_0* ( )))
   ;
generic Alt100_0
   = ClassModifier
   ;
public generic ClassModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' (!W (UBAR ( ))))))))))
   /  (void:'a' (void:'b' (void:'s' (void:'t' (void:'r' (void:'a' (void:'c' (void:'t' (!W (UBAR ( )))))))))))
   /  (void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (!W (UBAR ( ))))))))
   /  (void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'s' (void:'t' (void:'r' (void:'i' (void:'c' (void:'t' (void:'f' (void:'p' (!W (UBAR ( )))))))))))
   ;
public generic TypeParameters
   =  (void:'<' (!(void:'=') (UBAR (TypeParameter (Alt102_0* (void:'>' (!(void:'=') (UBAR ( )))))))))
   ;
generic Alt102_0
   = void:',' (UBAR TypeParameter)
   ;
public generic TypeParameter
   =  (Annotations (UnannoTypeParameter ( )))
   / UnannoTypeParameter
   ;
public generic UnannoTypeParameter
   = Identifier Alt104_0?
   ;
generic Alt104_0
   =  (void:'e' (void:'x' (void:'t' (void:'e' (void:'n' (void:'d' (void:'s' (!W (UBAR (ClassOrInterfaceType (Alt104_1* ( ))))))))))))
   ;
generic Alt104_1
   = void:'&' (!(void:'&' / void:'=') (UBAR InterfaceType))
   ;
public generic SuperClass
   = void:'e' (void:'x' (void:'t' (void:'e' (void:'n' (void:'d' (void:'s' (!W (UBAR ( (ClassOrInterfaceType ( )))))))))))
   ;
public generic SuperInterfaces
   = void:'i' (void:'m' (void:'p' (void:'l' (void:'e' (void:'m' (void:'e' (void:'n' (void:'t' (void:'s' (!W (UBAR ( (ClassOrInterfaceTypes ( ))))))))))))))
   ;
public generic ClassOrInterfaceTypes
   =  (ClassOrInterfaceType (Alt107_0* ( )))
   ;
generic Alt107_0
   = void:',' (UBAR ClassOrInterfaceType)
   ;
public generic ClassBody
   = void:'{' (UBAR ( (Alt108_0* ( ( (void:'}' UBAR))))))
   ;
generic Alt108_0
   = ClassBodyDeclaration
   ;
public generic ClassBodyDeclaration
   = ClassMemberDeclaration
   /  (Block ( ))
   / void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( (Block ( ))))))))))
   / ConstructorDeclaration
   ;
public generic ClassMemberDeclaration
   = FieldDeclaration
   / MethodDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   /  (void:';' (UBAR ( )))
   ;
public generic FieldDeclaration
   =  (Alt111_0? (Type (InitDeclList ( ( (void:';' UBAR))))))
   ;
generic Alt111_0
   = FieldModifiers
   ;
public generic FieldModifiers
   =  (FieldModifier (Alt112_0* ( )))
   ;
generic Alt112_0
   = FieldModifier
   ;
public generic FieldModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' (!W (UBAR ( ))))))))))
   /  (void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (!W (UBAR ( ))))))))
   /  (void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'t' (void:'r' (void:'a' (void:'n' (void:'s' (void:'i' (void:'e' (void:'n' (void:'t' (!W (UBAR ( ))))))))))))
   /  (void:'v' (void:'o' (void:'l' (void:'a' (void:'t' (void:'i' (void:'l' (void:'e' (!W (UBAR ( )))))))))))
   ;
public generic MethodDeclaration
   =  (Alt114_0? (Alt114_1? (TypeOrVoid (Identifier (void:'(' (UBAR (MethodParamList (void:')' (UBAR (Alt114_2? ((Block / void:';' UBAR) ( ))))))))))))
   ;
generic Alt114_0
   = MethodModifiers
   ;
generic Alt114_1
   = TypeParameters Alt114_3?
   ;
generic Alt114_2
   = Throws
   ;
generic Alt114_3
   = Annotations
   ;
public generic MethodModifiers
   =  (MethodModifier (Alt115_0* ( )))
   ;
generic Alt115_0
   = MethodModifier
   ;
public generic MethodModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' (!W (UBAR ( ))))))))))
   /  (void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (!W (UBAR ( ))))))))
   /  (void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'s' (void:'y' (void:'n' (void:'c' (void:'h' (void:'r' (void:'o' (void:'n' (void:'i' (void:'z' (void:'e' (void:'d' (!W (UBAR ( )))))))))))))))
   /  (void:'t' (void:'r' (void:'a' (void:'n' (void:'s' (void:'i' (void:'e' (void:'n' (void:'t' (!W (UBAR ( ))))))))))))
   /  (void:'v' (void:'o' (void:'l' (void:'a' (void:'t' (void:'i' (void:'l' (void:'e' (!W (UBAR ( )))))))))))
   ;
public generic TypeOrVoid
   = Type
   / Void
   ;
public generic Void
   =  (void:'v' (void:'o' (void:'i' (void:'d' (!W (UBAR ( )))))))
   ;
public generic MethodParamList
   =  (Alt119_0* (VarParam ( )))
   /  (Alt119_1? ( ))
   ;
generic Alt119_0
   = MethodParam (void:',' UBAR)
   ;
generic Alt119_1
   = MethodParam Alt119_2*
   ;
generic Alt119_2
   = void:',' (UBAR MethodParam)
   ;
public generic MethodParam
   =  (Alt120_0? (Type (VarName ( ))))
   ;
generic Alt120_0
   = VariableModifiers
   ;
public generic VarParam
   =  (Alt121_0? (Type (void:'.' (void:'.' (void:'.' (UBAR (VarName ( ))))))))
   ;
generic Alt121_0
   = VariableModifiers
   ;
public generic Throws
   = void:'t' (void:'h' (void:'r' (void:'o' (void:'w' (void:'s' (!W (UBAR ( (ClassOrInterfaceTypes ( ))))))))))
   ;
public generic InterfaceDeclaration
   =  (Alt123_0? (void:'i' (void:'n' (void:'t' (void:'e' (void:'r' (void:'f' (void:'a' (void:'c' (void:'e' (!W (UBAR (Identifier (Alt123_1? (Alt123_2* (InterfaceBody ( )))))))))))))))))
   /  (Alt123_3? (void:'@' (UBAR (void:'i' (void:'n' (void:'t' (void:'e' (void:'r' (void:'f' (void:'a' (void:'c' (void:'e' (!W (UBAR (Identifier (AnnotationTypeBody ( )))))))))))))))))
   ;
generic Alt123_0
   = InterfaceModifiers
   ;
generic Alt123_1
   = TypeParameters
   ;
generic Alt123_2
   = ExtendsInterfaces
   ;
generic Alt123_3
   = InterfaceModifiers
   ;
public generic InterfaceModifiers
   =  (InterfaceModifier (Alt124_0* ( )))
   ;
generic Alt124_0
   = InterfaceModifier
   ;
public generic InterfaceModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' (!W (UBAR ( ))))))))))
   /  (void:'a' (void:'b' (void:'s' (void:'t' (void:'r' (void:'a' (void:'c' (void:'t' (!W (UBAR ( )))))))))))
   /  (void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'s' (void:'t' (void:'r' (void:'i' (void:'c' (void:'t' (void:'f' (void:'p' (!W (UBAR ( )))))))))))
   ;
public generic ExtendsInterfaces
   =  (void:'e' (void:'x' (void:'t' (void:'e' (void:'n' (void:'d' (void:'s' (!W (UBAR (ClassOrInterfaceTypes ( )))))))))))
   ;
public generic InterfaceBody
   = void:'{' (UBAR ( (Alt127_0* ( ( (void:'}' UBAR))))))
   ;
generic Alt127_0
   = InterfaceMemberDeclaration
   ;
public generic InterfaceMemberDeclaration
   = ConstantDeclaration
   / InterfaceMethodDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   /  (void:';' (UBAR ( )))
   ;
public generic ConstantDeclaration
   =  (Alt129_0? (Type (InitDeclList ( ( (void:';' UBAR))))))
   ;
generic Alt129_0
   = ConstantModifiers
   ;
public generic ConstantModifiers
   =  (ConstantModifier (Alt130_0* ( )))
   ;
generic Alt130_0
   = ConstantModifier
   ;
public generic ConstantModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'f' (void:'i' (void:'n' (void:'a' (void:'l' (!W (UBAR ( ))))))))
   /  (void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   ;
public generic InterfaceMethodDeclaration
   =  (Alt132_0? (Alt132_1? (TypeOrVoid (Identifier (void:'(' (UBAR (MethodParamList (void:')' (UBAR (Alt132_2? ((Block / void:';' UBAR) ( ))))))))))))
   ;
generic Alt132_0
   = InterfaceMethodModifiers
   ;
generic Alt132_1
   = TypeParameters Alt132_3?
   ;
generic Alt132_2
   = Throws
   ;
generic Alt132_3
   = Annotations
   ;
public generic InterfaceMethodModifiers
   =  (InterfaceMethodModifier (Alt133_0* ( )))
   ;
generic Alt133_0
   = InterfaceMethodModifier
   ;
public generic InterfaceMethodModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' (!W (UBAR ( ))))))))))
   /  (void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   ;
public generic AnnotationTypeBody
   = void:'{' (UBAR ( (Alt135_0* ( ( (void:'}' UBAR))))))
   ;
generic Alt135_0
   = AnnotationTypeMemberDeclaration
   ;
public generic AnnotationTypeMemberDeclaration
   = AnnotationTypeElementDeclaration
   / ConstantDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   /  (void:';' (UBAR ( )))
   ;
public generic AnnotationTypeElementDeclaration
   =  (Alt137_0? (Type (Identifier (void:'(' (UBAR (void:')' (UBAR (Alt137_1? (void:';' (UBAR ( )))))))))))
   ;
generic Alt137_0
   = AnnotationTypeElementModifiers
   ;
generic Alt137_1
   = AnnotationTypeElementDefaultValue
   ;
public generic AnnotationTypeElementModifiers
   =  (AnnotationTypeElementModifier (Alt138_0* ( )))
   ;
generic Alt138_0
   = AnnotationTypeElementModifier
   ;
public generic AnnotationTypeElementModifier
   = Annotation
   / void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR (UBAR ( ( ( ( ( )) ( ( ( )) ))))))))))))
   / void:'a' (void:'b' (void:'s' (void:'t' (void:'r' (void:'a' (void:'c' (void:'t' (!W (UBAR ( ( ( ( ( )) ( ( ( )) )))))))))))))
   ;
public generic AnnotationTypeElementDefaultValue
   = void:'d' (void:'e' (void:'f' (void:'a' (void:'u' (void:'l' (void:'t' (!W (UBAR ElementValue))))))))
   ;
public generic ConstructorDeclaration
   =  (Alt141_0? (ReferenceType (void:'(' (UBAR (MethodParamList (void:')' (UBAR (Alt141_1? (ConstructorBody ( ))))))))))
   ;
generic Alt141_0
   = ConstructorModifiers
   ;
generic Alt141_1
   = Throws
   ;
public generic ConstructorModifiers
   =  (ConstructorModifier (Alt142_0* ( )))
   ;
generic Alt142_0
   = ConstructorModifier
   ;
public generic ConstructorModifier
   = Annotation
   /  (void:'p' (void:'u' (void:'b' (void:'l' (void:'i' (void:'c' (!W (UBAR ( )))))))))
   /  (void:'p' (void:'r' (void:'o' (void:'t' (void:'e' (void:'c' (void:'t' (void:'e' (void:'d' (!W (UBAR ( ))))))))))))
   /  (void:'p' (void:'r' (void:'i' (void:'v' (void:'a' (void:'t' (void:'e' (!W (UBAR ( ))))))))))
   ;
public generic ConstructorBody
   =  (void:'{' (UBAR (Alt144_0? ((Statement / LocalDeclaration)* (void:'}' (UBAR ( )))))))
   ;
generic Alt144_0
   = ExplicitConstructorInvocation
   ;
public generic ExplicitConstructorInvocation
   =  (Alt145_0? ( (This (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( ))))))) ( ( (void:';' UBAR)))))
   /  (Alt145_1? ( (Super (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( ))))))) ( ( (void:';' UBAR)))))
   /  (PostfixExpression (void:'.' (!(void:'.') (UBAR (Alt145_2? (Super ( (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( )))))) ( ( (void:';' UBAR))))))))))
   ;
generic Alt145_0
   = TypeArguments
   ;
generic Alt145_1
   = TypeArguments
   ;
generic Alt145_2
   = TypeArguments
   ;
public generic EnumBody
   = void:'{' (UBAR ( (Alt146_0? (Alt146_1? (void:';' (UBAR (Alt146_2+ ( ( (void:'}' UBAR))))))))))
   / void:'{' (UBAR ( (Alt146_3? (Alt146_4? (Alt146_5? ( ( (void:'}' UBAR))))))))
   ;
generic Alt146_0
   = EnumeratorList
   ;
generic Alt146_1
   = void:',' UBAR
   ;
generic Alt146_2
   = ClassBodyDeclaration
   ;
generic Alt146_3
   = EnumeratorList
   ;
generic Alt146_4
   = void:',' UBAR
   ;
generic Alt146_5
   = void:';' UBAR
   ;
public generic EnumeratorList
   =  (Enumerator (Alt147_0* ( )))
   ;
generic Alt147_0
   = void:',' (UBAR Enumerator)
   ;
public generic Enumerator
   =  (Alt148_0? (Identifier (Alt148_1? (Alt148_2? ( )))))
   ;
generic Alt148_0
   = Annotations
   ;
generic Alt148_1
   =  (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( ))))))
   ;
generic Alt148_2
   = ClassBody
   ;
public generic AssignmentExpression
   =  (UnaryExpression (addAssignmentOperator (Expression )))
   / ConditionalExpression
   ;
public generic addAssignmentOperator
   = void:'=' (!(void:'=') (UBAR ))
   / void:'*' (void:'=' (UBAR ))
   / void:'/' (void:'=' (UBAR ))
   / void:'%' (void:'=' (UBAR ))
   / void:'+' (void:'=' (UBAR ))
   / void:'-' (void:'=' (UBAR ))
   / void:'<' (void:'<' (void:'=' (UBAR )))
   / void:'>' (void:'>' (void:'=' (UBAR )))
   / void:'>' (void:'>' (void:'>' (void:'=' (UBAR ))))
   / void:'&' (void:'=' (UBAR ))
   / void:'^' (void:'=' (UBAR ))
   / void:'|' (void:'=' (UBAR ))
   ;
public generic ClassLiteral
   =  (TypeOrVoid (void:'.' (!(void:'.') (UBAR (void:'c' (void:'l' (void:'a' (void:'s' (void:'s' (!W (UBAR ( ))))))))))))
   ;
public generic MethodInvocationExpression
   =  (Identifier ( (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( )))))) ( )))
   ;
public generic InstanceCreationExpression
   =  (void:'n' (void:'e' (void:'w' (!W (UBAR (Alt153_0? (Alt153_1? (ClassOrInterfaceType ( (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( )))))) (Alt153_2? ( )))))))))))
   ;
generic Alt153_0
   = TypeArguments
   ;
generic Alt153_1
   = Annotations
   ;
generic Alt153_2
   = ClassBody
   ;
public generic ArrayCreationExpression
   =  (void:'n' (void:'e' (void:'w' (!W (UBAR (Alt154_0? (NonArrayType (Alt154_1+ Alt154_2*) ( ))))))))
   /  (void:'n' (void:'e' (void:'w' (!W (UBAR (Alt154_3? (NonArrayType Alt154_4+ (ArrayInitializer ( )))))))))
   ;
generic Alt154_0
   = Annotations
   ;
generic Alt154_1
   =  (Alt154_5? (void:'[' (UBAR (Expression (void:']' (UBAR ( )))))))
   ;
generic Alt154_2
   =  (Alt154_6? (void:'[' (UBAR (void:']' (UBAR ( ))))))
   ;
generic Alt154_3
   = Annotations
   ;
generic Alt154_4
   =  (Alt154_7? (void:'[' (UBAR (void:']' (UBAR ( ))))))
   ;
generic Alt154_5
   = Annotations
   ;
generic Alt154_6
   = Annotations
   ;
generic Alt154_7
   = Annotations
   ;
public generic NonArrayType
   = ClassOrInterfaceType
   / PrimitiveType
   ;
public generic MethodReference
   =  (ReferenceType (void:':' (void:':' (UBAR (Alt156_0? (Identifier /  (void:'n' (void:'e' (void:'w' (!W (UBAR ( )))))) ( )))))))
   ;
generic Alt156_0
   = TypeArguments
   ;
public generic addMethodCall
   = void:'.' (!(void:'.') (UBAR (Alt157_0? (Identifier ( (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( )))))) )))))
   ;
generic Alt157_0
   = TypeArguments
   ;
public generic addInstanceCreation
   = void:'.' (!(void:'.') (UBAR (void:'n' (void:'e' (void:'w' (!W (UBAR (Alt158_0? (Alt158_1? (ClassOrInterfaceType ( (void:'(' (UBAR (addArgumentExpressionList? (void:')' (UBAR ( )))))) (Alt158_2? ))))))))))))
   ;
generic Alt158_0
   = TypeArguments
   ;
generic Alt158_1
   = Annotations
   ;
generic Alt158_2
   = ClassBody
   ;
public generic addIndex
   = void:'[' (UBAR (Expression (void:']' (UBAR ))))
   ;
public generic addField
   = void:'.' (!(void:'.') (UBAR (Identifier (!(void:'(') ))))
   ;
public generic addMethodReference
   = void:':' (void:':' (UBAR (Alt161_0? (Identifier ))))
   ;
generic Alt161_0
   = TypeArguments
   ;
public generic addInc
   = void:'+' (void:'+' (UBAR ))
   ;
public generic addDec
   = void:'-' (void:'-' (UBAR ))
   ;
public generic relationalOperator
   = void:'<' (void:'=' (UBAR ))
   / void:'>' (void:'=' (UBAR ))
   / void:'<' (!(void:'=') (UBAR ))
   / void:'>' (!(void:'=') (UBAR ))
   ;
public generic ImportDeclaration
   =  (void:'i' (void:'m' (void:'p' (void:'o' (void:'r' (void:'t' (!W (UBAR ((void:'s' (void:'t' (void:'a' (void:'t' (void:'i' (void:'c' (!W (UBAR ))))))) / ) (PackageName ( (void:';' UBAR))))))))))))
   ;
public generic PackageName
   = QualifiedName Alt166_0?
   ;
generic Alt166_0
   =  (void:'.' (!(void:'.') (UBAR (void:'*' (!(void:'=') (UBAR ( )))))))
   ;
public generic TypeDeclaration
   = ClassDeclaration
   / InterfaceDeclaration
   /  (void:';' (UBAR ( )))
   ;
public generic EOT
   = !(_)
   ;
