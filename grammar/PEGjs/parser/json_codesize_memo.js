module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { JSON_text: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          function(value) { return value; },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "{",
          { type: "literal", value: "{", description: "\"{\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" },
          "}",
          { type: "literal", value: "}", description: "\"}\"" },
          ":",
          { type: "literal", value: ":", description: "\":\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          { type: "other", description: "whitespace" },
          /^[ \t\n\r]/,
          { type: "class", value: "[ \\t\\n\\r]", description: "[ \\t\\n\\r]" },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() { return false; },
          "null",
          { type: "literal", value: "null", description: "\"null\"" },
          function() { return null;  },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() { return true;  },
          function(head, m) { return m; },
          function(head, tail) {
                  var result = {}, i;

                  result[head.name] = head.value;

                  for (i = 0; i < tail.length; i++) {
                    result[tail[i].name] = tail[i].value;
                  }

                  return result;
                },
          function(members) { return members !== null ? members: {}; },
          function(name, value) {
                return { name: name, value: value };
              },
          function(head, v) { return v; },
          function(head, tail) { return [head].concat(tail); },
          function(values) { return values !== null ? values : []; },
          { type: "other", description: "number" },
          function() { return parseFloat(text()); },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          /^[1-9]/,
          { type: "class", value: "[1-9]", description: "[1-9]" },
          /^[eE]/,
          { type: "class", value: "[eE]", description: "[eE]" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          { type: "other", description: "string" },
          function(chars) { return chars.join(""); },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b"; },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f"; },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n"; },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r"; },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t"; },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                    return String.fromCharCode(parseInt(digits, 16));
                  },
          function(sequence) { return sequence; },
          /^[ -!#-[\]-\u10FFFF]/,
          { type: "class", value: "[\\x20-\\x21\\x23-\\x5B\\x5D-\\u10FFFF]", description: "[\\x20-\\x21\\x23-\\x5B\\x5D-\\u10FFFF]" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" }
        ],

        peg$bytecode = [
          peg$decode("%;'/:#;(/1$;'/($8#: #!!)(#'#(\"'#&'#"),
          peg$decode("%;'/;#2!\"\"6!7\"/,$;'/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;'/;#2#\"\"6#7$/,$;'/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;'/;#2%\"\"6%7&/,$;'/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;'/;#2'\"\"6'7(/,$;'/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;'/;#2)\"\"6)7*/,$;'/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;'/;#2+\"\"6+7,/,$;'/#$+#)(#'#(\"'#&'#"),
          peg$decode("<$4.\"\"5!7/0)*4.\"\"5!7/&=.\" 7-"),
          peg$decode(";).A &;*.; &;+.5 &;,./ &;..) &;/.# &;9"),
          peg$decode("%20\"\"6071/& 8!:2! )"),
          peg$decode("%23\"\"6374/& 8!:5! )"),
          peg$decode("%26\"\"6677/& 8!:8! )"),
          peg$decode("%;\"/\x91#%;-/k#$%;&/2#;-/)$8\":9\"\"$ )(\"'#&'#0<*%;&/2#;-/)$8\":9\"\"$ )(\"'#&'#&/)$8\"::\"\"! )(\"'#&'#.\" &\"/1$;$/($8#:;#!!)(#'#(\"'#&'#"),
          peg$decode("%;9/;#;%/2$;(/)$8#:<#\"\" )(#'#(\"'#&'#"),
          peg$decode("%;!/\x91#%;(/k#$%;&/2#;(/)$8\":=\"\"$ )(\"'#&'#0<*%;&/2#;(/)$8\":=\"\"$ )(\"'#&'#&/)$8\":>\"\"! )(\"'#&'#.\" &\"/1$;#/($8#:?#!!)(#'#(\"'#&'#"),
          peg$decode("<%;6.\" &\"/L#;5/C$;4.\" &\"/5$;3.\" &\"/'$8$:A$ )($'#(#'#(\"'#&'#=.\" 7@"),
          peg$decode("2B\"\"6B7C"),
          peg$decode("4D\"\"5!7E"),
          peg$decode("4F\"\"5!7G"),
          peg$decode("%;2/M#;6.# &;7.\" &\"/9$$;>/&#0#*;>&&&#/#$+#)(#'#(\"'#&'#"),
          peg$decode("%;0/9#$;>/&#0#*;>&&&#/#$+\")(\"'#&'#"),
          peg$decode(";8.= &%;1/3#$;>0#*;>&/#$+\")(\"'#&'#"),
          peg$decode("2H\"\"6H7I"),
          peg$decode("2J\"\"6J7K"),
          peg$decode("2L\"\"6L7M"),
          peg$decode("<%;</A#$;:0#*;:&/1$;</($8#:O#!!)(#'#(\"'#&'#=.\" 7N"),
          peg$decode(";=.\u011C &%;;/\u0112#2P\"\"6P7Q.\xF8 &2R\"\"6R7S.\xEC &2T\"\"6T7U.\xE0 &%2V\"\"6V7W/& 8!:X! ).\xC9 &%2Y\"\"6Y7Z/& 8!:[! ).\xB2 &%2\\\"\"6\\7]/& 8!:^! ).\x9B &%2_\"\"6_7`/& 8!:a! ).\x84 &%2b\"\"6b7c/& 8!:d! ).m &%2e\"\"6e7f/]#%%;?/>#;?/5$;?/,$;?/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":g\"! )(\"'#&'#/($8\":h\"! )(\"'#&'#"),
          peg$decode("2R\"\"6R7S"),
          peg$decode("2P\"\"6P7Q"),
          peg$decode("4i\"\"5!7j"),
          peg$decode("4k\"\"5!7l"),
          peg$decode("4m\"\"5!7n")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      var key    = peg$currPos * 32 + index,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
