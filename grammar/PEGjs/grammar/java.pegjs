
// The following is generated by the Nez Grammar Generator
File
   = (_  PackageDeclaration? ImportDeclaration* TypeDeclaration*   _ EOT ) {}

_
   = (S
   / BLOCKCOMMENT
   / LINECOMMENT)* {}

S
   = (" "
   / '\n'
   / '\r'
   / '\t'
    ) {}

BLOCKCOMMENT
   = ("/" "*" (!("*" "/" ) . )* "*" "/" ) {}

LINECOMMENT
   = ("/" "/" (!'\n' . )* ) {}

PackageDeclaration
   = ( Annotations? "p" "a" "c" "k" "a" "g" "e" !W _ QualifiedName   ";" _ ) {}

Annotations
   = ( Annotation Annotation*   ) {}

Annotation
   = (("@" _  QualifiedName "(" _ ElementValuePairList? ")" _   )
   / ("@" _  QualifiedName "(" _ ElementValue ")" _   )
   / ("@" _  QualifiedName   )) {}

QualifiedName
   = (Identifier ( "." !"." _ Identifier   )* ) {}

Identifier
   = ( NAME   _ ) {}

NAME
   = (!(DIGIT
   / (KEYWORD !W )) W+ ) {}

DIGIT
   = [0-9] {}

KEYWORD
   = (("a" "b" "s" "t" "r" "a" "c" "t" !W _ )
   / ("a" "s" "s" "e" "r" "t" !W _ )
   / ("b" "o" "o" "l" "e" "a" "n" !W _ )
   / ("b" "r" "e" "a" "k" !W _ )
   / ("b" "y" "t" "e" !W _ )
   / ("c" "a" "s" "e" !W _ )
   / ("c" "a" "t" "c" "h" !W _ )
   / ("c" "h" "a" "r" !W _ )
   / ("c" "l" "a" "s" "s" !W _ )
   / ("c" "o" "n" "s" "t" !W _ )
   / ("c" "o" "n" "t" "i" "n" "u" "e" !W _ )
   / ("d" "e" "f" "a" "u" "l" "t" !W _ )
   / ("d" "o" "u" "b" "l" "e" !W _ )
   / ("d" "o" !W _ )
   / ("e" "l" "s" "e" !W _ )
   / ("e" "n" "u" "m" !W _ )
   / ("e" "x" "t" "e" "n" "d" "s" !W _ )
   / ("f" "a" "l" "s" "e" !W _ )
   / ("f" "i" "n" "a" "l" !W _ )
   / ("f" "i" "n" "a" "l" "l" "y" !W _ )
   / ("f" "l" "o" "a" "t" !W _ )
   / ("f" "o" "r" !W _ )
   / ("g" "o" "t" "o" !W _ )
   / ("i" "f" !W _ )
   / ("i" "m" "p" "l" "e" "m" "e" "n" "t" "s" !W _ )
   / ("i" "m" "p" "o" "r" "t" !W _ )
   / ("i" "n" "s" "t" "a" "n" "c" "e" "o" "f" !W _ )
   / ("i" "n" "t" "e" "r" "f" "a" "c" "e" !W _ )
   / ("i" "n" "t" !W _ )
   / ("l" "o" "n" "g" !W _ )
   / ("n" "a" "t" "i" "v" "e" !W _ )
   / ("n" "e" "w" !W _ )
   / ("n" "u" "l" "l" !W _ )
   / ("p" "a" "c" "k" "a" "g" "e" !W _ )
   / ("p" "r" "i" "v" "a" "t" "e" !W _ )
   / ("p" "r" "o" "t" "e" "c" "t" "e" "d" !W _ )
   / ("p" "u" "b" "l" "i" "c" !W _ )
   / ("r" "e" "t" "u" "r" "n" !W _ )
   / ("s" "h" "o" "r" "t" !W _ )
   / ("s" "t" "a" "t" "i" "c" !W _ )
   / ("s" "t" "r" "i" "c" "t" "f" "p" !W _ )
   / ("s" "u" "p" "e" "r" !W _ )
   / ("s" "w" "i" "t" "c" "h" !W _ )
   / ("s" "y" "n" "c" "h" "r" "o" "n" "i" "z" "e" "d" !W _ )
   / ("t" "h" "i" "s" !W _ )
   / ("t" "h" "r" "o" "w" "s" !W _ )
   / ("t" "h" "r" "o" "w" !W _ )
   / ("t" "r" "a" "n" "s" "i" "e" "n" "t" !W _ )
   / ("t" "r" "u" "e" !W _ )
   / ("t" "r" "y" !W _ )
   / ("v" "o" "i" "d" !W _ )
   / ("v" "o" "l" "a" "t" "i" "l" "e" !W _ )
   / ("w" "h" "i" "l" "e" !W _ )) {}

W
   = ([a-z]
   / [A-Z]
   / [0-9]
   / "_"
   / "$") {}

ElementValuePairList
   = ( ElementValuePair ("," _ ElementValuePair )*   ) {}

ElementValuePair
   = ( Identifier "=" !"=" _ ElementValue   ) {}

ElementValue
   = (ElementValueArrayInitializer
   / ConditionalExpression
   / Annotation) {}

ElementValueArrayInitializer
   = ("{" _  ElementValueList?   ("," _ )? "}" _ ) {}

ElementValueList
   = ( ElementValue ("," _ ElementValue )*   ) {}

ConditionalExpression
   = (LogicalOrExpression ( "?" _ Expression ":" !(">"
   / ":") _ LogicalOrExpression   )* ) {}

LogicalOrExpression
   = (LogicalAndExpression ( "|" "|" _ LogicalAndExpression   )* ) {}

LogicalAndExpression
   = (InclusiveOrExpression ( "&" "&" _ InclusiveOrExpression   )* ) {}

InclusiveOrExpression
   = (ExclusiveOrExpression ( "|" !("|"
   / "=") _ ExclusiveOrExpression   )* ) {}

ExclusiveOrExpression
   = (AndExpression ( "^" !"=" _ AndExpression   )* ) {}

AndExpression
   = (EqualityExpression ( "&" !("&"
   / "=") _ EqualityExpression   )* ) {}

EqualityExpression
   = (RelationalExpression ( (("=" "=" _  )
   / ("!" "=" _  )) RelationalExpression  )* ) {}

RelationalExpression
   = (ShiftExpression ( ((relationalOperator ShiftExpression )
   / ("i" "n" "s" "t" "a" "n" "c" "e" "o" "f" !W _ ReferenceType  ))  )* ) {}

ShiftExpression
   = (AdditiveExpression ( (("<" "<" !"=" _  )
   / (">" ">" !("="
   / ">") _  )
   / (">" ">" ">" !"=" _  )) AdditiveExpression  )* ) {}

AdditiveExpression
   = (MultiplicativeExpression ( (("+" !("+"
   / "=") _  )
   / ("-" !("-"
   / "="
   / ">") _  )) MultiplicativeExpression  )* ) {}

MultiplicativeExpression
   = (CastNewExpression ( (("*" !"=" _  )
   / ("/" !"=" _  )
   / ("%" !("="
   / ">") _  )) CastNewExpression  )* ) {}

CastNewExpression
   = (( "(" _ Type ")" _ CastNewExpression   )
   / UnaryExpression) {}

Type
   = (ReferenceType
   / PrimitiveType) {}

ReferenceType
   = (ArrayType
   / ClassOrInterfaceType
   / TypeVariable) {}

ArrayType
   = ((PrimitiveType
   / ClassOrInterfaceType
   / TypeVariable) ( Annotations? "[" _ "]" _   )+ ) {}

PrimitiveType
   = (( Annotations UnannoPrimitiveType   )
   / UnannoPrimitiveType) {}

UnannoPrimitiveType
   = (NumericType
   / BooleanType) {}

NumericType
   = (IntegralType
   / FloatingPointType) {}

IntegralType
   = (( "b" "y" "t" "e" !W _   )
   / ( "c" "h" "a" "r" !W _   )
   / ( "s" "h" "o" "r" "t" !W _   )
   / ( "i" "n" "t" !W _   )
   / ( "l" "o" "n" "g" !W _   )) {}

FloatingPointType
   = (( "f" "l" "o" "a" "t" !W _   )
   / ( "d" "o" "u" "b" "l" "e" !W _   )) {}

BooleanType
   = ( "b" "o" "o" "l" "e" "a" "n" !W _   ) {}

ClassOrInterfaceType
   = (ClassType
   / InterfaceType) {}

ClassType
   = (QualifiedName ( TypeArguments   )? ) {}

TypeArguments
   = ( "<" !"=" _ (TypeArgument ("," _ TypeArgument )* )? ">" !"=" _   ) {}

TypeArgument
   = (ReferenceType
   / ( Annotations? "?" _   ( (("e" "x" "t" "e" "n" "d" "s" !W _  )
   / ("s" "u" "p" "e" "r" !W _  )) ReferenceType  )? )) {}

InterfaceType
   = ClassType {}

TypeVariable
   = (( Annotations Identifier   )
   / Identifier) {}

UnaryExpression
   = (PostfixExpression
   / ( "+" "+" _ UnaryExpression   )
   / ( "-" "-" _ UnaryExpression   )
   / ( "+" !("+"
   / "=") _ CastNewExpression   )
   / ( "-" !("-"
   / "="
   / ">") _ CastNewExpression   )
   / ( "~" _ CastNewExpression   )
   / ( "!" !"=" _ CastNewExpression   )) {}

PostfixExpression
   = (PrimaryExpression ( (addMethodCall
   / addInstanceCreation
   / addIndex
   / addField
   / addMethodReference
   / addInc
   / addDec)  )* ) {}

PrimaryExpression
   = (Constant
   / This
   / Super
   / ("(" _ Expression ")" _ )
   / ClassLiteral
   / ( QualifiedName "." !"." _ "t" "h" "i" "s" !W _   )
   / ( QualifiedName "." !"." _ "s" "u" "p" "e" "r" !W _   )
   / MethodInvocationExpression
   / InstanceCreationExpression
   / ArrayCreationExpression
   / MethodReference
   / Identifier) {}

Constant
   = Literal {}

Literal
   = (FloatingPointLiteral
   / IntegerLiteral
   / BooleanLiteral
   / CharacterLiteral
   / StringLiteral
   / NullLiteral) {}

FloatingPointLiteral
   = (( FLOAT   FLOAT_SUFFIX? _ )
   / ( DECIMAL   FLOAT_SUFFIX _ )) {}

FLOAT
   = ((FRACTION EXPONENT? )
   / (DIGIT+ EXPONENT )) {}

FRACTION
   = ((!"_" ("_"* DIGIT )* "." DIGIT ("_"* DIGIT )* )
   / (DIGIT ("_"* DIGIT )* "." )) {}

EXPONENT
   = (("e"
   / "E") ("+"
   / "-")? DIGIT ("_"* DIGIT )* ) {}

FLOAT_SUFFIX
   = ("f"
   / "F"
   / "d"
   / "D") {}

DECIMAL
   = (("0" !("b"
   / "B"
   / "x"
   / "X"
   / [0-9]
   / "_") )
   / ([1-9] ("_"* DIGIT )* )) {}

IntegerLiteral
   = ( (DECIMAL
   / HEXADECIMAL
   / BINARY
   / OCTAL) ((INT_SUFFIX  )
   / (FLOAT_SUFFIX  )
   / )  _ ) {}

HEXADECIMAL
   = ("0" ("x"
   / "X") HEX ("_"* HEX )* ) {}

HEX
   = ([a-f]
   / [A-F]
   / [0-9]) {}

BINARY
   = ("0" ("b"
   / "B") ("0"
   / "1") ("_"* ("0"
   / "1") )* ) {}

OCTAL
   = ("0" ("_"* [0-7] )* ) {}

INT_SUFFIX
   = ("l"
   / "L") {}

BooleanLiteral
   = (( "t" "r" "u" "e" !W _   )
   / ( "f" "a" "l" "s" "e" !W _   )) {}

CharacterLiteral
   = ("'"  CHAR_CONTENT*   "'" _ ) {}

CHAR_CONTENT
   = (ESCAPE
   / (!("'"
   / '\n'
   / '\\') . )) {}

ESCAPE
   = (SIMPLE_ESCAPE
   / OCTAL_ESCAPE
   / HEX_ESCAPE) {}

SIMPLE_ESCAPE
   = ('\\' ("'"
   / '\\'
   / "\""
   / '\\'
   / "b"
   / "f"
   / "n"
   / "r"
   / "t") ) {}

OCTAL_ESCAPE
   = (('\\' [0-3] [0-7] [0-7] )
   / ('\\' [0-7] [0-7] )
   / ('\\' [0-7] )) {}

HEX_ESCAPE
   = ('\\' "u"+ HEX4 ) {}

HEX4
   = (HEX HEX HEX HEX ) {}

StringLiteral
   = ("\""  STRING_CONTENT*   "\"" _ ) {}

STRING_CONTENT
   = (ESCAPE
   / (!('\\'
   / "\""
   / '\n'
   / '\\') . )) {}

NullLiteral
   = ( "n" "u" "l" "l" !W _   ) {}

This
   = ( "t" "h" "i" "s" !W _   ) {}

Super
   = ( "s" "u" "p" "e" "r" !W _   ) {}

Expression
   = (LambdaExpression
   / AssignmentExpression) {}

LambdaExpression
   = ( LambdaParameters "-" ">" _ LambdaBody   ) {}

LambdaParameters
   = ( (Identifier
   / ( "(" _ addArgumentExpressionList? ")" _   )
   / ("(" _ InferredFormalParameterList ")" _ ))   ) {}

addArgumentExpressionList
   = (Expression ("," _ Expression )* ) {}

InferredFormalParameterList
   = ( Identifier ("," _ Identifier )*   ) {}

LambdaBody
   = (Expression
   / Block) {}

Block
   = ( "{" _ (Statement
   / LocalDeclaration)* "}" _   ) {}

Statement
   = (Block
   / ( "a" "s" "s" "e" "r" "t" !W _ Expression (":" !(">"
   / ":") _ Expression )? ";" _   )
   / ( "i" "f" !W _ "(" _ Expression ")" _ Statement ("e" "l" "s" "e" !W _ Statement )?   )
   / ( "s" "w" "i" "t" "c" "h" !W _ "(" _ Expression ")" _ Statement   )
   / ( "w" "h" "i" "l" "e" !W _ "(" _ Expression ")" _ Statement   )
   / ( "d" "o" !W _ Statement "w" "h" "i" "l" "e" !W _ "(" _ Expression ")" _ ";" _   )
   / ( "f" "o" "r" !W _ "(" _ Expressions? ";" _ Expression? ";" _ Expressions? ")" _ Statement   )
   / ( "f" "o" "r" !W _ "(" _ VariableDeclaration ";" _ Expression? ";" _ Expressions? ")" _ Statement   )
   / ( "f" "o" "r" !W _ "(" _ VariableModifiers? Type Identifier ":" !(">"
   / ":") _ Expression ")" _ Statement   )
   / ( "g" "o" "t" "o" !W _ Identifier ";" _   )
   / ( "c" "o" "n" "t" "i" "n" "u" "e" !W _ Identifier? ";" _   )
   / ( "b" "r" "e" "a" "k" !W _ Identifier? ";" _   )
   / ( "r" "e" "t" "u" "r" "n" !W _ Expression? ";" _   )
   / ( "t" "r" "y" !W _ ResourceStatement Block CatchBlock* ( "f" "i" "n" "a" "l" "l" "y" !W _ Block   )?   )
   / ( "t" "r" "y" !W _ Block CatchBlock* ( "f" "i" "n" "a" "l" "l" "y" !W _ Block   )   )
   / ( "t" "r" "y" !W _ Block CatchBlock+   )
   / ( "t" "h" "r" "o" "w" !W _ Expression ";" _   )
   / ( "s" "y" "n" "c" "h" "r" "o" "n" "i" "z" "e" "d" !W _ "(" _ Expression ")" _ Block   )
   / ( "c" "a" "s" "e" !W _ ConstantExpression ":" !(">"
   / ":") _ (!(("c" "a" "s" "e" !W _ )
   / ("d" "e" "f" "a" "u" "l" "t" !W _ )) Statement )*   )
   / ( "d" "e" "f" "a" "u" "l" "t" !W _ ":" !(">"
   / ":") _ (!("c" "a" "s" "e" !W _ ) Statement )*   )
   / ( Identifier ":" !(">"
   / ":") _   )
   / ( Expression ";" _   )
   / ( ";" _   )) {}

Expressions
   = ( Expression ("," _ Expression )*   ) {}

VariableDeclaration
   = ( VariableModifiers? Type InitDeclList   ) {}

VariableModifiers
   = ( VariableModifier VariableModifier*   ) {}

VariableModifier
   = (Annotation
   / ("f" "i" "n" "a" "l" !W _    )) {}

InitDeclList
   = ( InitDecl ("," _ InitDecl )*   ) {}

InitDecl
   = ( VarName ("=" !"=" _ Initializer )?   ) {}

VarName
   = (Identifier ( "[" _ ConstantExpression? "]" _   )* ) {}

ConstantExpression
   = ConditionalExpression {}

Initializer
   = (Expression
   / ArrayInitializer) {}

ArrayInitializer
   = ( "{" _ (Initializer ("," _ Initializer )* )? ("," _ )? "}" _   ) {}

ResourceStatement
   = ("(" _  Resource (";" _ Resource )*   (";" _ )? ")" _ ) {}

Resource
   = ( VariableModifiers? Type Identifier "=" !"=" _ Expression   ) {}

CatchBlock
   = ( "c" "a" "t" "c" "h" !W _ "(" _ CatchParameter ")" _ Block   ) {}

CatchParameter
   = ( VariableModifiers? ClassOrInterfaceType Identifier ("|" !("|"
   / "=") _ Identifier )*   ) {}

LocalDeclaration
   = ((VariableDeclaration ";" _ )
   / ClassDeclaration) {}

ClassDeclaration
   = (( ClassModifiers? "c" "l" "a" "s" "s" !W _ Identifier TypeParameters? SuperClass? SuperInterfaces* ClassBody   )
   / ( ClassModifiers? "e" "n" "u" "m" !W _ Identifier SuperInterfaces* EnumBody   )) {}

ClassModifiers
   = ( ClassModifier ClassModifier*   ) {}

ClassModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "p" "r" "i" "v" "a" "t" "e" !W _   )
   / ( "a" "b" "s" "t" "r" "a" "c" "t" !W _   )
   / ( "f" "i" "n" "a" "l" !W _   )
   / ( "s" "t" "a" "t" "i" "c" !W _   )
   / ( "s" "t" "r" "i" "c" "t" "f" "p" !W _   )) {}

TypeParameters
   = ( "<" !"=" _ TypeParameter ("," _ TypeParameter )* ">" !"=" _   ) {}

TypeParameter
   = (( Annotations UnannoTypeParameter   )
   / UnannoTypeParameter) {}

UnannoTypeParameter
   = (Identifier ( "e" "x" "t" "e" "n" "d" "s" !W _ ClassOrInterfaceType ("&" !("&"
   / "=") _ InterfaceType )*   )? ) {}

SuperClass
   = ("e" "x" "t" "e" "n" "d" "s" !W _  ClassOrInterfaceType   ) {}

SuperInterfaces
   = ("i" "m" "p" "l" "e" "m" "e" "n" "t" "s" !W _  ClassOrInterfaceTypes   ) {}

ClassOrInterfaceTypes
   = ( ClassOrInterfaceType ("," _ ClassOrInterfaceType )*   ) {}

ClassBody
   = ("{" _  ClassBodyDeclaration*   "}" _ ) {}

ClassBodyDeclaration
   = (ClassMemberDeclaration
   / ( Block   )
   / ("s" "t" "a" "t" "i" "c" !W _  Block   )
   / ConstructorDeclaration) {}

ClassMemberDeclaration
   = (FieldDeclaration
   / MethodDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   / ( ";" _   )) {}

FieldDeclaration
   = ( FieldModifiers? Type InitDeclList   ";" _ ) {}

FieldModifiers
   = ( FieldModifier FieldModifier*   ) {}

FieldModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "p" "r" "i" "v" "a" "t" "e" !W _   )
   / ( "f" "i" "n" "a" "l" !W _   )
   / ( "s" "t" "a" "t" "i" "c" !W _   )
   / ( "t" "r" "a" "n" "s" "i" "e" "n" "t" !W _   )
   / ( "v" "o" "l" "a" "t" "i" "l" "e" !W _   )) {}

MethodDeclaration
   = ( MethodModifiers? (TypeParameters Annotations? )? TypeOrVoid Identifier "(" _ MethodParamList ")" _ Throws? (Block
   / (";" _ ))   ) {}

MethodModifiers
   = ( MethodModifier MethodModifier*   ) {}

MethodModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "p" "r" "i" "v" "a" "t" "e" !W _   )
   / ( "f" "i" "n" "a" "l" !W _   )
   / ( "s" "t" "a" "t" "i" "c" !W _   )
   / ( "s" "y" "n" "c" "h" "r" "o" "n" "i" "z" "e" "d" !W _   )
   / ( "t" "r" "a" "n" "s" "i" "e" "n" "t" !W _   )
   / ( "v" "o" "l" "a" "t" "i" "l" "e" !W _   )) {}

TypeOrVoid
   = (Type
   / Void) {}

Void
   = ( "v" "o" "i" "d" !W _   ) {}

MethodParamList
   = (( (MethodParam "," _ )* VarParam   )
   / ( (MethodParam ("," _ MethodParam )* )?   )) {}

MethodParam
   = ( VariableModifiers? Type VarName   ) {}

VarParam
   = ( VariableModifiers? Type "." "." "." _ VarName   ) {}

Throws
   = ("t" "h" "r" "o" "w" "s" !W _  ClassOrInterfaceTypes   ) {}

InterfaceDeclaration
   = (( InterfaceModifiers? "i" "n" "t" "e" "r" "f" "a" "c" "e" !W _ Identifier TypeParameters? ExtendsInterfaces* InterfaceBody   )
   / ( InterfaceModifiers? "@" _ "i" "n" "t" "e" "r" "f" "a" "c" "e" !W _ Identifier AnnotationTypeBody   )) {}

InterfaceModifiers
   = ( InterfaceModifier InterfaceModifier*   ) {}

InterfaceModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "p" "r" "i" "v" "a" "t" "e" !W _   )
   / ( "a" "b" "s" "t" "r" "a" "c" "t" !W _   )
   / ( "s" "t" "a" "t" "i" "c" !W _   )
   / ( "s" "t" "r" "i" "c" "t" "f" "p" !W _   )) {}

ExtendsInterfaces
   = ( "e" "x" "t" "e" "n" "d" "s" !W _ ClassOrInterfaceTypes   ) {}

InterfaceBody
   = ("{" _  InterfaceMemberDeclaration*   "}" _ ) {}

InterfaceMemberDeclaration
   = (ConstantDeclaration
   / InterfaceMethodDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   / ( ";" _   )) {}

ConstantDeclaration
   = ( ConstantModifiers? Type InitDeclList   ";" _ ) {}

ConstantModifiers
   = ( ConstantModifier ConstantModifier*   ) {}

ConstantModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "f" "i" "n" "a" "l" !W _   )
   / ( "s" "t" "a" "t" "i" "c" !W _   )) {}

InterfaceMethodDeclaration
   = ( InterfaceMethodModifiers? (TypeParameters Annotations? )? TypeOrVoid Identifier "(" _ MethodParamList ")" _ Throws? (Block
   / (";" _ ))   ) {}

InterfaceMethodModifiers
   = ( InterfaceMethodModifier InterfaceMethodModifier*   ) {}

InterfaceMethodModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "d" "e" "f" "a" "u" "l" "t" !W _   )
   / ( "s" "t" "a" "t" "i" "c" !W _   )) {}

AnnotationTypeBody
   = ("{" _  AnnotationTypeMemberDeclaration*   "}" _ ) {}

AnnotationTypeMemberDeclaration
   = (AnnotationTypeElementDeclaration
   / ConstantDeclaration
   / ClassDeclaration
   / InterfaceDeclaration
   / ( ";" _   )) {}

AnnotationTypeElementDeclaration
   = ( AnnotationTypeElementModifiers? Type Identifier "(" _ ")" _ AnnotationTypeElementDefaultValue? ";" _   ) {}

AnnotationTypeElementModifiers
   = ( AnnotationTypeElementModifier AnnotationTypeElementModifier*   ) {}

AnnotationTypeElementModifier
   = (Annotation
   / ("p" "u" "b" "l" "i" "c" !W _ _   (    ) (    )  )
   / ("a" "b" "s" "t" "r" "a" "c" "t" !W _   (    ) (    )  )) {}

AnnotationTypeElementDefaultValue
   = ("d" "e" "f" "a" "u" "l" "t" !W _ ElementValue ) {}

ConstructorDeclaration
   = ( ConstructorModifiers? ReferenceType "(" _ MethodParamList ")" _ Throws? ConstructorBody   ) {}

ConstructorModifiers
   = ( ConstructorModifier ConstructorModifier*   ) {}

ConstructorModifier
   = (Annotation
   / ( "p" "u" "b" "l" "i" "c" !W _   )
   / ( "p" "r" "o" "t" "e" "c" "t" "e" "d" !W _   )
   / ( "p" "r" "i" "v" "a" "t" "e" !W _   )) {}

ConstructorBody
   = ( "{" _ ExplicitConstructorInvocation? (Statement
   / LocalDeclaration)* "}" _   ) {}

ExplicitConstructorInvocation
   = (( TypeArguments? ( This "(" _ addArgumentExpressionList? ")" _   )   ";" _ )
   / ( TypeArguments? ( Super "(" _ addArgumentExpressionList? ")" _   )   ";" _ )
   / ( PostfixExpression "." !"." _ TypeArguments? Super ( "(" _ addArgumentExpressionList? ")" _   )   ";" _ )) {}

EnumBody
   = (("{" _  EnumeratorList? ("," _ )? ";" _ ClassBodyDeclaration+   "}" _ )
   / ("{" _  EnumeratorList? ("," _ )? (";" _ )?   "}" _ )) {}

EnumeratorList
   = ( Enumerator ("," _ Enumerator )*   ) {}

Enumerator
   = ( Annotations? Identifier ( "(" _ addArgumentExpressionList? ")" _   )? ClassBody?   ) {}

AssignmentExpression
   = (( UnaryExpression addAssignmentOperator Expression  )
   / ConditionalExpression) {}

addAssignmentOperator
   = (("=" !"=" _  )
   / ("*" "=" _  )
   / ("/" "=" _  )
   / ("%" "=" _  )
   / ("+" "=" _  )
   / ("-" "=" _  )
   / ("<" "<" "=" _  )
   / (">" ">" "=" _  )
   / (">" ">" ">" "=" _  )
   / ("&" "=" _  )
   / ("^" "=" _  )
   / ("|" "=" _  )) {}

ClassLiteral
   = ( TypeOrVoid "." !"." _ "c" "l" "a" "s" "s" !W _   ) {}

MethodInvocationExpression
   = ( Identifier ( "(" _ addArgumentExpressionList? ")" _   )   ) {}

InstanceCreationExpression
   = ( "n" "e" "w" !W _ TypeArguments? Annotations? ClassOrInterfaceType ( "(" _ addArgumentExpressionList? ")" _   ) ClassBody?   ) {}

ArrayCreationExpression
   = (( "n" "e" "w" !W _ Annotations? (NonArrayType ( Annotations? "[" _ Expression "]" _   )+ ( Annotations? "[" _ "]" _   )* )   )
   / ( "n" "e" "w" !W _ Annotations? (NonArrayType ( Annotations? "[" _ "]" _   )+ ) ArrayInitializer   )) {}

NonArrayType
   = (ClassOrInterfaceType
   / PrimitiveType) {}

MethodReference
   = ( ReferenceType ":" ":" _ TypeArguments? (Identifier
   / ( "n" "e" "w" !W _   ))   ) {}

addMethodCall
   = ("." !"." _ TypeArguments? Identifier ( "(" _ addArgumentExpressionList? ")" _   )  ) {}

addInstanceCreation
   = ("." !"." _ "n" "e" "w" !W _ TypeArguments? Annotations? ClassOrInterfaceType ( "(" _ addArgumentExpressionList? ")" _   ) ClassBody?  ) {}

addIndex
   = ("[" _ Expression "]" _  ) {}

addField
   = ("." !"." _ Identifier !"("  ) {}

addMethodReference
   = (":" ":" _ TypeArguments? Identifier  ) {}

addInc
   = ("+" "+" _  ) {}

addDec
   = ("-" "-" _  ) {}

relationalOperator
   = (("<" "=" _  )
   / (">" "=" _  )
   / ("<" !"=" _  )
   / (">" !"=" _  )) {}

ImportDeclaration
   = ( "i" "m" "p" "o" "r" "t" !W _ (("s" "t" "a" "t" "i" "c" !W _  )
   / ) PackageName  ";" _ ) {}

PackageName
   = (QualifiedName ( "." !"." _ "*" !"=" _   )? ) {}

TypeDeclaration
   = (ClassDeclaration
   / InterfaceDeclaration
   / ( ";" _   )) {}

EOT
   = !. {}
