  
// The following is generated by the Nez Grammar Generator 
#include<iostream>
#include<chrono>
#include"pegtl.hh"
struct pFile;
struct pXml;
struct pName;
struct pNAME;
struct pCDATA;
struct pFile : pegtl::must<pegtl::seq<pegtl::seq<pegtl::opt<pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::one<63>,pegtl::seq<pegtl::one<120>,pegtl::seq<pegtl::one<109>,pegtl::seq<pegtl::one<108>,pegtl::seq<pegtl::star<pegtl::seq<pegtl::not_at<pegtl::string<63,62>>,pegtl::any>>,pegtl::seq<pegtl::one<63>,pegtl::seq<pegtl::one<62>,pegtl::star<pegtl::one<9, 10, 13, 32>>>>>>>>>>>,pegtl::seq<pegtl::opt<pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::one<33>,pegtl::seq<pegtl::star<pegtl::seq<pegtl::success,pegtl::one<1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256>>>,pegtl::seq<pegtl::one<62>,pegtl::star<pegtl::one<9, 10, 13, 32>>>>>>>,pXml>>, pegtl::success> >{};

struct pXml : pegtl::seq<pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::success,pegtl::seq<pName,pegtl::seq<pegtl::star<pegtl::one<9, 10, 13, 32>>,pegtl::seq<pegtl::star<pegtl::seq<pegtl::success,pegtl::seq<pName,pegtl::seq<pegtl::star<pegtl::one<9, 10, 13, 32>>,pegtl::seq<pegtl::one<61>,pegtl::seq<pegtl::star<pegtl::one<9, 10, 13, 32>>,pegtl::seq<pegtl::seq<pegtl::one<34>,pegtl::seq<pegtl::success,pegtl::seq<pegtl::star<pegtl::seq<pegtl::success,pegtl::one<1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256>>>,pegtl::seq<pegtl::one<34>,pegtl::seq<pegtl::success,pegtl::success>>>>>,pegtl::seq<pegtl::success,pegtl::seq<pegtl::success,pegtl::star<pegtl::one<9, 10, 13, 32>>>>>>>>>>>,pegtl::seq<pegtl::sor<pegtl::string<47,62>, pegtl::seq<pegtl::one<62>,pegtl::seq<pegtl::star<pegtl::one<9, 10, 13, 32>>,pegtl::seq<pegtl::star<pegtl::sor<pegtl::sor<pXml, pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::one<33>,pegtl::seq<pegtl::one<91>,pegtl::seq<pegtl::one<67>,pegtl::seq<pegtl::one<68>,pegtl::seq<pegtl::one<65>,pegtl::seq<pegtl::one<84>,pegtl::seq<pegtl::one<65>,pegtl::seq<pegtl::one<91>,pegtl::seq<pegtl::success,pegtl::seq<pCDATA,pegtl::seq<pegtl::one<93>,pegtl::seq<pegtl::one<93>,pegtl::seq<pegtl::one<62>,pegtl::seq<pegtl::success,pegtl::seq<pegtl::success,pegtl::star<pegtl::one<9, 10, 13, 32>>>>>>>>>>>>>>>>>>, pegtl::seq<pegtl::success,pegtl::seq<pegtl::plus<pegtl::seq<pegtl::success,pegtl::one<1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256>>>,pegtl::seq<pegtl::success,pegtl::success>>>>, pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::one<33>,pegtl::seq<pegtl::one<45>,pegtl::seq<pegtl::one<45>,pegtl::seq<pegtl::star<pegtl::seq<pegtl::not_at<pegtl::string<45,45,62>>,pegtl::any>>,pegtl::seq<pegtl::one<45>,pegtl::seq<pegtl::one<45>,pegtl::seq<pegtl::one<62>,pegtl::star<pegtl::one<9, 10, 13, 32>>>>>>>>>>>>,pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::one<47>,pegtl::seq<pNAME,pegtl::one<62>>>>>>>>,pegtl::seq<pegtl::success,pegtl::seq<pegtl::success,pegtl::star<pegtl::one<9, 10, 13, 32>>>>>>>>>>, pegtl::success> {};

struct pName : pegtl::seq<pegtl::seq<pegtl::success,pegtl::seq<pNAME,pegtl::seq<pegtl::success,pegtl::success>>>, pegtl::success> {};

struct pNAME : pegtl::seq<pegtl::seq<pegtl::one<58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122>,pegtl::star<pegtl::one<45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122>>>, pegtl::success> {};

struct pCDATA : pegtl::seq<pegtl::seq<pegtl::star<pegtl::seq<pegtl::not_at<pegtl::string<93,93,62>>,pegtl::seq<pegtl::not_at<pegtl::string<60,33,91,67,68,65,84,65,91>>,pegtl::any>>>,pegtl::opt<pegtl::seq<pegtl::one<60>,pegtl::seq<pegtl::one<33>,pegtl::seq<pegtl::one<91>,pegtl::seq<pegtl::one<67>,pegtl::seq<pegtl::one<68>,pegtl::seq<pegtl::one<65>,pegtl::seq<pegtl::one<84>,pegtl::seq<pegtl::one<65>,pegtl::seq<pegtl::one<91>,pegtl::seq<pCDATA,pegtl::seq<pegtl::one<93>,pegtl::seq<pegtl::one<93>,pegtl::seq<pegtl::one<62>,pCDATA>>>>>>>>>>>>>>>, pegtl::success> {};

template<typename T>
struct action : pegtl::nothing<T> {};
template<>
struct action<pFile> {
   static void apply(const pegtl::input& in){
   }
};
int main(int argc, char ** argv) {
   //pegtl::parse<pFile,action>(1,argv);
   freopen(argv[1],"r",stdin);
   std::string input="",tmp;
   while( getline(std::cin,tmp) ) input += ( tmp + '\n' );
   //for(int i=0;i<10;i++){
   const auto startTime = std::chrono::system_clock::now();
   pegtl::parse<pFile,action>(input,"");
   const auto endTime   = std::chrono::system_clock::now();
   const auto timeSpan  = endTime - startTime;
   std::cout << std::string(argv[1]) << "," << std::chrono::duration_cast<std::chrono::milliseconds>(timeSpan).count() << "[ms]" << std::endl;
   //}
   return 0;
}
